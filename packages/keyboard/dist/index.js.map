{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * An object which represents an abstract keyboard layout.\r\n */\r\nexport\r\ninterface IKeyboardLayout {\r\n  /**\r\n   * The human readable name of the layout.\r\n   *\r\n   * This value is used primarily for display and debugging purposes.\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * Get an array of all key values supported by the layout.\r\n   *\r\n   * @returns A new array of the supported key values.\r\n   *\r\n   * #### Notes\r\n   * This can be useful for authoring tools and debugging, when it's\r\n   * necessary to know which keys are available for shortcut use.\r\n   */\r\n  keys(): string[];\r\n\r\n  /**\r\n   * Test whether the given key is a valid value for the layout.\r\n   *\r\n   * @param key - The user provided key to test for validity.\r\n   *\r\n   * @returns `true` if the key is valid, `false` otherwise.\r\n   */\r\n  isValidKey(key: string): boolean;\r\n\r\n  /**\r\n   * Get the key for a `'keydown'` event.\r\n   *\r\n   * @param event - The event object for a `'keydown'` event.\r\n   *\r\n   * @returns The associated key value, or an empty string if the event\r\n   *   does not represent a valid primary key.\r\n   */\r\n  keyForKeydownEvent(event: KeyboardEvent): string;\r\n}\r\n\r\n\r\n/**\r\n * Get the global application keyboard layout instance.\r\n *\r\n * @returns The keyboard layout for use by the application.\r\n *\r\n * #### Notes\r\n * The default keyboard layout is US-English.\r\n */\r\nexport\r\nfunction getKeyboardLayout(): IKeyboardLayout {\r\n  return Private.keyboardLayout;\r\n}\r\n\r\n\r\n/**\r\n * Set the global application keyboard layout instance.\r\n *\r\n * @param - The keyboard layout for use by the application.\r\n *\r\n * #### Notes\r\n * The keyboard layout should typically be set on application startup\r\n * to a layout which is appropriate for the user's system.\r\n */\r\nexport\r\nfunction setKeyboardLayout(layout: IKeyboardLayout): void {\r\n  Private.keyboardLayout = layout;\r\n}\r\n\r\n\r\n/**\r\n * A concrete implementation of [[IKeyboardLayout]] based on keycodes.\r\n *\r\n * The `keyCode` property of a `'keydown'` event is a browser and OS\r\n * specific representation of the physical key (not character) which\r\n * was pressed on a keyboard. While not the most convenient API, it\r\n * is currently the only one which works reliably on all browsers.\r\n *\r\n * This class accepts a user-defined mapping of keycode to key, which\r\n * allows for reliable shortcuts tailored to the user's system.\r\n */\r\nexport\r\nclass KeycodeLayout implements IKeyboardLayout {\r\n  /**\r\n   * Construct a new keycode layout.\r\n   *\r\n   * @param name - The human readable name for the layout.\r\n   *\r\n   * @param codes - A mapping of keycode to key value.\r\n   */\r\n  constructor(name: string, codes: KeycodeLayout.CodeMap) {\r\n    this.name = name;\r\n    this._codes = codes;\r\n    this._keys = KeycodeLayout.extractKeys(codes);\r\n  }\r\n\r\n  /**\r\n   * The human readable name of the layout.\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * Get an array of the key values supported by the layout.\r\n   *\r\n   * @returns A new array of the supported key values.\r\n   */\r\n  keys(): string[] {\r\n    return Object.keys(this._keys);\r\n  }\r\n\r\n  /**\r\n   * Test whether the given key is a valid value for the layout.\r\n   *\r\n   * @param key - The user provided key to test for validity.\r\n   *\r\n   * @returns `true` if the key is valid, `false` otherwise.\r\n   */\r\n  isValidKey(key: string): boolean {\r\n    return key in this._keys;\r\n  }\r\n\r\n  /**\r\n   * Get the key for a `'keydown'` event.\r\n   *\r\n   * @param event - The event object for a `'keydown'` event.\r\n   *\r\n   * @returns The associated key value, or an empty string if\r\n   *   the event does not represent a valid primary key.\r\n   */\r\n  keyForKeydownEvent(event: KeyboardEvent): string {\r\n    return this._codes[event.keyCode] || '';\r\n  }\r\n\r\n  private _keys: KeycodeLayout.KeySet;\r\n  private _codes: KeycodeLayout.CodeMap;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `KeycodeLayout` class statics.\r\n */\r\nexport\r\nnamespace KeycodeLayout {\r\n  /**\r\n   * A type alias for a keycode map.\r\n   */\r\n  export\r\n  type CodeMap = { readonly [code: number]: string };\r\n\r\n  /**\r\n   * A type alias for a key set.\r\n   */\r\n  export\r\n  type KeySet = { readonly [key: string]: boolean };\r\n\r\n  /**\r\n   * Extract the set of keys from a code map.\r\n   *\r\n   * @param code - The code map of interest.\r\n   *\r\n   * @returns A set of the keys in the code map.\r\n   */\r\n  export\r\n  function extractKeys(codes: CodeMap): KeySet {\r\n    let keys: any = Object.create(null);\r\n    for (let c in codes) {\r\n      keys[codes[c]] = true;\r\n    }\r\n    return keys as KeySet;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A keycode-based keyboard layout for US English keyboards.\r\n *\r\n * This layout is valid for the following OS/Browser combinations.\r\n *\r\n * - Windows\r\n *   - Chrome\r\n *   - Firefox\r\n *   - IE\r\n *\r\n * - OSX\r\n *   - Chrome\r\n *   - Firefox\r\n *   - Safari\r\n *\r\n * - Linux\r\n *   - Chrome\r\n *   - Firefox\r\n *\r\n * Other combinations may also work, but are untested.\r\n */\r\nexport\r\nconst EN_US: IKeyboardLayout = new KeycodeLayout('en-us', {\r\n  8: 'Backspace',\r\n  9: 'Tab',\r\n  13: 'Enter',\r\n  19: 'Pause',\r\n  27: 'Escape',\r\n  32: 'Space',\r\n  33: 'PageUp',\r\n  34: 'PageDown',\r\n  35: 'End',\r\n  36: 'Home',\r\n  37: 'ArrowLeft',\r\n  38: 'ArrowUp',\r\n  39: 'ArrowRight',\r\n  40: 'ArrowDown',\r\n  45: 'Insert',\r\n  46: 'Delete',\r\n  48: '0',\r\n  49: '1',\r\n  50: '2',\r\n  51: '3',\r\n  52: '4',\r\n  53: '5',\r\n  54: '6',\r\n  55: '7',\r\n  56: '8',\r\n  57: '9',\r\n  59: ';',  // firefox\r\n  61: '=',  // firefox\r\n  65: 'A',\r\n  66: 'B',\r\n  67: 'C',\r\n  68: 'D',\r\n  69: 'E',\r\n  70: 'F',\r\n  71: 'G',\r\n  72: 'H',\r\n  73: 'I',\r\n  74: 'J',\r\n  75: 'K',\r\n  76: 'L',\r\n  77: 'M',\r\n  78: 'N',\r\n  79: 'O',\r\n  80: 'P',\r\n  81: 'Q',\r\n  82: 'R',\r\n  83: 'S',\r\n  84: 'T',\r\n  85: 'U',\r\n  86: 'V',\r\n  87: 'W',\r\n  88: 'X',\r\n  89: 'Y',\r\n  90: 'Z',\r\n  93: 'ContextMenu',\r\n  96: '0',   // numpad\r\n  97: '1',   // numpad\r\n  98: '2',   // numpad\r\n  99: '3',   // numpad\r\n  100: '4',  // numpad\r\n  101: '5',  // numpad\r\n  102: '6',  // numpad\r\n  103: '7',  // numpad\r\n  104: '8',  // numpad\r\n  105: '9',  // numpad\r\n  106: '*',  // numpad\r\n  107: '+',  // numpad\r\n  109: '-',  // numpad\r\n  110: '.',  // numpad\r\n  111: '/',  // numpad\r\n  112: 'F1',\r\n  113: 'F2',\r\n  114: 'F3',\r\n  115: 'F4',\r\n  116: 'F5',\r\n  117: 'F6',\r\n  118: 'F7',\r\n  119: 'F8',\r\n  120: 'F9',\r\n  121: 'F10',\r\n  122: 'F11',\r\n  123: 'F12',\r\n  173: '-',  // firefox\r\n  186: ';',  // non-firefox\r\n  187: '=',  // non-firefox\r\n  188: ',',\r\n  189: '-',  // non-firefox\r\n  190: '.',\r\n  191: '/',\r\n  192: '`',\r\n  219: '[',\r\n  220: '\\\\',\r\n  221: ']',\r\n  222: '\\''\r\n});\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * The global keyboard layout instance.\r\n   */\r\n  export\r\n  let keyboardLayout = EN_US;\r\n}\r\n"],"names":["KeycodeLayout"],"mappings":"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"}