{"version":3,"file":"index.es6.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * A class which attaches a value to an external object.\r\n *\r\n * #### Notes\r\n * Attached properties are used to extend the state of an object with\r\n * semantic data from an unrelated class. They also encapsulate value\r\n * creation, coercion, and notification.\r\n *\r\n * Because attached property values are stored in a hash table, which\r\n * in turn is stored in a WeakMap keyed on the owner object, there is\r\n * non-trivial storage overhead involved in their use. The pattern is\r\n * therefore best used for the storage of rare data.\r\n */\r\nexport\r\nclass AttachedProperty<T, U> {\r\n  /**\r\n   * Construct a new attached property.\r\n   *\r\n   * @param options - The options for initializing the property.\r\n   */\r\n  constructor(options: AttachedProperty.IOptions<T, U>) {\r\n    this.name = options.name;\r\n    this._create = options.create;\r\n    this._coerce = options.coerce || null;\r\n    this._compare = options.compare || null;\r\n    this._changed = options.changed || null;\r\n  }\r\n\r\n  /**\r\n   * The human readable name for the property.\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * Get the current value of the property for a given owner.\r\n   *\r\n   * @param owner - The property owner of interest.\r\n   *\r\n   * @returns The current value of the property.\r\n   *\r\n   * #### Notes\r\n   * If the value has not yet been set, the default value will be\r\n   * computed and assigned as the current value of the property.\r\n   */\r\n  get(owner: T): U {\r\n    let value: U;\r\n    let map = Private.ensureMap(owner);\r\n    if (this._pid in map) {\r\n      value = map[this._pid];\r\n    } else {\r\n      value = map[this._pid] = this._createValue(owner);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Set the current value of the property for a given owner.\r\n   *\r\n   * @param owner - The property owner of interest.\r\n   *\r\n   * @param value - The value for the property.\r\n   *\r\n   * #### Notes\r\n   * If the value has not yet been set, the default value will be\r\n   * computed and used as the previous value for the comparison.\r\n   */\r\n  set(owner: T, value: U): void {\r\n    let oldValue: U;\r\n    let map = Private.ensureMap(owner);\r\n    if (this._pid in map) {\r\n      oldValue = map[this._pid];\r\n    } else {\r\n      oldValue = map[this._pid] = this._createValue(owner);\r\n    }\r\n    let newValue = this._coerceValue(owner, value);\r\n    this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\r\n  }\r\n\r\n  /**\r\n   * Explicitly coerce the current property value for a given owner.\r\n   *\r\n   * @param owner - The property owner of interest.\r\n   *\r\n   * #### Notes\r\n   * If the value has not yet been set, the default value will be\r\n   * computed and used as the previous value for the comparison.\r\n   */\r\n  coerce(owner: T): void {\r\n    let oldValue: U;\r\n    let map = Private.ensureMap(owner);\r\n    if (this._pid in map) {\r\n      oldValue = map[this._pid];\r\n    } else {\r\n      oldValue = map[this._pid] = this._createValue(owner);\r\n    }\r\n    let newValue = this._coerceValue(owner, oldValue);\r\n    this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\r\n  }\r\n\r\n  /**\r\n   * Get or create the default value for the given owner.\r\n   */\r\n  private _createValue(owner: T): U {\r\n    let create = this._create;\r\n    return create(owner);\r\n  }\r\n\r\n  /**\r\n   * Coerce the value for the given owner.\r\n   */\r\n  private _coerceValue(owner: T, value: U): U {\r\n    let coerce = this._coerce;\r\n    return coerce ? coerce(owner, value) : value;\r\n  }\r\n\r\n  /**\r\n   * Compare the old value and new value for equality.\r\n   */\r\n  private _compareValue(oldValue: U, newValue: U): boolean {\r\n    let compare = this._compare;\r\n    return compare ? compare(oldValue, newValue) : oldValue === newValue;\r\n  }\r\n\r\n  /**\r\n   * Run the change notification if the given values are different.\r\n   */\r\n  private _maybeNotify(owner: T, oldValue: U, newValue: U): void {\r\n    let changed = this._changed;\r\n    if (changed && !this._compareValue(oldValue, newValue)) {\r\n      changed(owner, oldValue, newValue);\r\n    }\r\n  }\r\n\r\n  private _pid = Private.nextPID();\r\n  private _create: ((owner: T) => U);\r\n  private _coerce: ((owner: T, value: U) => U) | null;\r\n  private _compare: ((oldValue: U, newValue: U) => boolean) | null;\r\n  private _changed: ((owner: T, oldValue: U, newValue: U) => void) | null;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `AttachedProperty` class statics.\r\n */\r\nexport\r\nnamespace AttachedProperty {\r\n  /**\r\n   * The options object used to initialize an attached property.\r\n   */\r\n  export\r\n  interface IOptions<T, U> {\r\n    /**\r\n     * The human readable name for the property.\r\n     *\r\n     * #### Notes\r\n     * By convention, this should be the same as the name used to define\r\n     * the public accessor for the property value.\r\n     *\r\n     * This **does not** have an effect on the property lookup behavior.\r\n     * Multiple properties may share the same name without conflict.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * A factory function used to create the default property value.\r\n     *\r\n     * #### Notes\r\n     * This will be called whenever the property value is required,\r\n     * but has not yet been set for a given owner.\r\n     */\r\n    create: (owner: T) => U;\r\n\r\n    /**\r\n     * A function used to coerce a supplied value into the final value.\r\n     *\r\n     * #### Notes\r\n     * This will be called whenever the property value is changed, or\r\n     * when the property is explicitly coerced. The return value will\r\n     * be used as the final value of the property.\r\n     *\r\n     * This will **not** be called for the initial default value.\r\n     */\r\n    coerce?: (owner: T, value: U) => U;\r\n\r\n    /**\r\n     * A function used to compare two values for equality.\r\n     *\r\n     * #### Notes\r\n     * This is called to determine if the property value has changed.\r\n     * It should return `true` if the given values are equivalent, or\r\n     * `false` if they are different.\r\n     *\r\n     * If this is not provided, it defaults to the `===` operator.\r\n     */\r\n    compare?: (oldValue: U, newValue: U) => boolean;\r\n\r\n    /**\r\n     * A function called when the property value has changed.\r\n     *\r\n     * #### Notes\r\n     * This will be invoked when the property value is changed and the\r\n     * comparator indicates that the old value is not equal to the new\r\n     * value.\r\n     *\r\n     * This will **not** be called for the initial default value.\r\n     */\r\n    changed?: (owner: T, oldValue: U, newValue: U) => void;\r\n  }\r\n\r\n  /**\r\n   * Clear the stored property data for the given owner.\r\n   *\r\n   * @param owner - The property owner of interest.\r\n   *\r\n   * #### Notes\r\n   * This will clear all property values for the owner, but it will\r\n   * **not** run the change notification for any of the properties.\r\n   */\r\n  export\r\n  function clearData(owner: any): void {\r\n    Private.ownerData.delete(owner);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * A typedef for a mapping of property id to property value.\r\n   */\r\n  export\r\n  type PropertyMap = { [key: string]: any };\r\n\r\n  /**\r\n   * A weak mapping of property owner to property map.\r\n   */\r\n  export\r\n  const ownerData = new WeakMap<any, PropertyMap>();\r\n\r\n  /**\r\n   * A function which computes successive unique property ids.\r\n   */\r\n  export\r\n  const nextPID = (() => {\r\n    let id = 0;\r\n    return () => {\r\n      let rand = Math.random();\r\n      let stem = `${rand}`.slice(2);\r\n      return `pid-${stem}-${id++}`;\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * Lookup the data map for the property owner.\r\n   *\r\n   * This will create the map if one does not already exist.\r\n   */\r\n  export\r\n  function ensureMap(owner: any): PropertyMap {\r\n    let map = ownerData.get(owner);\r\n    if (map) {\r\n      return map;\r\n    }\r\n    map = Object.create(null) as PropertyMap;\r\n    ownerData.set(owner, map);\r\n    return map;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}