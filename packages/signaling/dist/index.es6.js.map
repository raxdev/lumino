{"version":3,"file":"index.es6.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ArrayExt, each, find\r\n} from '@lumino/algorithm';\r\n\r\n\r\n\r\n/**\r\n * A type alias for a slot function.\r\n *\r\n * @param sender - The object emitting the signal.\r\n *\r\n * @param args - The args object emitted with the signal.\r\n *\r\n * #### Notes\r\n * A slot is invoked when a signal to which it is connected is emitted.\r\n */\r\nexport\r\ntype Slot<T, U> = (sender: T, args: U) => void;\r\n\r\n\r\n/**\r\n * An object used for type-safe inter-object communication.\r\n *\r\n * #### Notes\r\n * Signals provide a type-safe implementation of the publish-subscribe\r\n * pattern. An object (publisher) declares which signals it will emit,\r\n * and consumers connect callbacks (subscribers) to those signals. The\r\n * subscribers are invoked whenever the publisher emits the signal.\r\n */\r\nexport\r\ninterface ISignal<T, U> {\r\n  /**\r\n   * Connect a slot to the signal.\r\n   *\r\n   * @param slot - The slot to invoke when the signal is emitted.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection succeeds, `false` otherwise.\r\n   *\r\n   * #### Notes\r\n   * Slots are invoked in the order in which they are connected.\r\n   *\r\n   * Signal connections are unique. If a connection already exists for\r\n   * the given `slot` and `thisArg`, this method returns `false`.\r\n   *\r\n   * A newly connected slot will not be invoked until the next time the\r\n   * signal is emitted, even if the slot is connected while the signal\r\n   * is dispatching.\r\n   */\r\n  connect(slot: Slot<T, U>, thisArg?: any): boolean;\r\n\r\n  /**\r\n   * Disconnect a slot from the signal.\r\n   *\r\n   * @param slot - The slot to disconnect from the signal.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection is removed, `false` otherwise.\r\n   *\r\n   * #### Notes\r\n   * If no connection exists for the given `slot` and `thisArg`, this\r\n   * method returns `false`.\r\n   *\r\n   * A disconnected slot will no longer be invoked, even if the slot\r\n   * is disconnected while the signal is dispatching.\r\n   */\r\n  disconnect(slot: Slot<T, U>, thisArg?: any): boolean;\r\n}\r\n\r\n\r\n/**\r\n * A concrete implementation of `ISignal`.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { ISignal, Signal } from '@lumino/signaling';\r\n *\r\n * class SomeClass {\r\n *\r\n *   constructor(name: string) {\r\n *     this.name = name;\r\n *   }\r\n *\r\n *   readonly name: string;\r\n *\r\n *   get valueChanged: ISignal<this, number> {\r\n *     return this._valueChanged;\r\n *   }\r\n *\r\n *   get value(): number {\r\n *     return this._value;\r\n *   }\r\n *\r\n *   set value(value: number) {\r\n *     if (value === this._value) {\r\n *       return;\r\n *     }\r\n *     this._value = value;\r\n *     this._valueChanged.emit(value);\r\n *   }\r\n *\r\n *   private _value = 0;\r\n *   private _valueChanged = new Signal<this, number>(this);\r\n * }\r\n *\r\n * function logger(sender: SomeClass, value: number): void {\r\n *   console.log(sender.name, value);\r\n * }\r\n *\r\n * let m1 = new SomeClass('foo');\r\n * let m2 = new SomeClass('bar');\r\n *\r\n * m1.valueChanged.connect(logger);\r\n * m2.valueChanged.connect(logger);\r\n *\r\n * m1.value = 42;  // logs: foo 42\r\n * m2.value = 17;  // logs: bar 17\r\n * ```\r\n */\r\nexport\r\nclass Signal<T, U> implements ISignal<T, U> {\r\n  /**\r\n   * Construct a new signal.\r\n   *\r\n   * @param sender - The sender which owns the signal.\r\n   */\r\n  constructor(sender: T) {\r\n    this.sender = sender;\r\n  }\r\n\r\n  /**\r\n   * The sender which owns the signal.\r\n   */\r\n  readonly sender: T;\r\n\r\n  /**\r\n   * Connect a slot to the signal.\r\n   *\r\n   * @param slot - The slot to invoke when the signal is emitted.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection succeeds, `false` otherwise.\r\n   */\r\n  connect(slot: Slot<T, U>, thisArg?: any): boolean {\r\n    return Private.connect(this, slot, thisArg);\r\n  }\r\n\r\n  /**\r\n   * Disconnect a slot from the signal.\r\n   *\r\n   * @param slot - The slot to disconnect from the signal.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection is removed, `false` otherwise.\r\n   */\r\n  disconnect(slot: Slot<T, U>, thisArg?: any): boolean {\r\n    return Private.disconnect(this, slot, thisArg);\r\n  }\r\n\r\n  /**\r\n   * Emit the signal and invoke the connected slots.\r\n   *\r\n   * @param args - The args to pass to the connected slots.\r\n   *\r\n   * #### Notes\r\n   * Slots are invoked synchronously in connection order.\r\n   *\r\n   * Exceptions thrown by connected slots will be caught and logged.\r\n   */\r\n  emit(args: U): void {\r\n    Private.emit(this, args);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `Signal` class statics.\r\n */\r\nexport\r\nnamespace Signal {\r\n  /**\r\n   * Remove all connections between a sender and receiver.\r\n   *\r\n   * @param sender - The sender object of interest.\r\n   *\r\n   * @param receiver - The receiver object of interest.\r\n   *\r\n   * #### Notes\r\n   * If a `thisArg` is provided when connecting a signal, that object\r\n   * is considered the receiver. Otherwise, the `slot` is considered\r\n   * the receiver.\r\n   */\r\n  export\r\n  function disconnectBetween(sender: any, receiver: any): void {\r\n    Private.disconnectBetween(sender, receiver);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where the given object is the sender.\r\n   *\r\n   * @param sender - The sender object of interest.\r\n   */\r\n  export\r\n  function disconnectSender(sender: any): void {\r\n    Private.disconnectSender(sender);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where the given object is the receiver.\r\n   *\r\n   * @param receiver - The receiver object of interest.\r\n   *\r\n   * #### Notes\r\n   * If a `thisArg` is provided when connecting a signal, that object\r\n   * is considered the receiver. Otherwise, the `slot` is considered\r\n   * the receiver.\r\n   */\r\n  export\r\n  function disconnectReceiver(receiver: any): void {\r\n    Private.disconnectReceiver(receiver);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where an object is the sender or receiver.\r\n   *\r\n   * @param object - The object of interest.\r\n   *\r\n   * #### Notes\r\n   * If a `thisArg` is provided when connecting a signal, that object\r\n   * is considered the receiver. Otherwise, the `slot` is considered\r\n   * the receiver.\r\n   */\r\n  export\r\n  function disconnectAll(object: any): void {\r\n    Private.disconnectAll(object);\r\n  }\r\n\r\n  /**\r\n   * Clear all signal data associated with the given object.\r\n   *\r\n   * @param object - The object for which the data should be cleared.\r\n   *\r\n   * #### Notes\r\n   * This removes all signal connections and any other signal data\r\n   * associated with the object.\r\n   */\r\n  export\r\n  function clearData(object: any): void {\r\n    Private.disconnectAll(object);\r\n  }\r\n\r\n  /**\r\n   * A type alias for the exception handler function.\r\n   */\r\n  export\r\n  type ExceptionHandler = (err: Error) => void;\r\n\r\n  /**\r\n   * Get the signal exception handler.\r\n   *\r\n   * @returns The current exception handler.\r\n   *\r\n   * #### Notes\r\n   * The default exception handler is `console.error`.\r\n   */\r\n  export\r\n  function getExceptionHandler(): ExceptionHandler {\r\n    return Private.exceptionHandler;\r\n  }\r\n\r\n  /**\r\n   * Set the signal exception handler.\r\n   *\r\n   * @param handler - The function to use as the exception handler.\r\n   *\r\n   * @returns The old exception handler.\r\n   *\r\n   * #### Notes\r\n   * The exception handler is invoked when a slot throws an exception.\r\n   */\r\n  export\r\n  function setExceptionHandler(handler: ExceptionHandler): ExceptionHandler {\r\n    let old = Private.exceptionHandler;\r\n    Private.exceptionHandler = handler;\r\n    return old;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * The signal exception handler function.\r\n   */\r\n  export\r\n  let exceptionHandler: Signal.ExceptionHandler = (err: Error) => {\r\n    console.error(err);\r\n  };\r\n\r\n  /**\r\n   * Connect a slot to a signal.\r\n   *\r\n   * @param signal - The signal of interest.\r\n   *\r\n   * @param slot - The slot to invoke when the signal is emitted.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection succeeds, `false` otherwise.\r\n   */\r\n  export\r\n  function connect<T, U>(signal: Signal<T, U>, slot: Slot<T, U>, thisArg?: any): boolean {\r\n    // Coerce a `null` `thisArg` to `undefined`.\r\n    thisArg = thisArg || undefined;\r\n\r\n    // Ensure the sender's array of receivers is created.\r\n    let receivers = receiversForSender.get(signal.sender);\r\n    if (!receivers) {\r\n      receivers = [];\r\n      receiversForSender.set(signal.sender, receivers);\r\n    }\r\n\r\n    // Bail if a matching connection already exists.\r\n    if (findConnection(receivers, signal, slot, thisArg)) {\r\n      return false;\r\n    }\r\n\r\n    // Choose the best object for the receiver.\r\n    let receiver = thisArg || slot;\r\n\r\n    // Ensure the receiver's array of senders is created.\r\n    let senders = sendersForReceiver.get(receiver);\r\n    if (!senders) {\r\n      senders = [];\r\n      sendersForReceiver.set(receiver, senders);\r\n    }\r\n\r\n    // Create a new connection and add it to the end of each array.\r\n    let connection = { signal, slot, thisArg };\r\n    receivers.push(connection);\r\n    senders.push(connection);\r\n\r\n    // Indicate a successful connection.\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Disconnect a slot from a signal.\r\n   *\r\n   * @param signal - The signal of interest.\r\n   *\r\n   * @param slot - The slot to disconnect from the signal.\r\n   *\r\n   * @param thisArg - The `this` context for the slot. If provided,\r\n   *   this must be a non-primitive object.\r\n   *\r\n   * @returns `true` if the connection is removed, `false` otherwise.\r\n   */\r\n  export\r\n  function disconnect<T, U>(signal: Signal<T, U>, slot: Slot<T, U>, thisArg?: any): boolean {\r\n    // Coerce a `null` `thisArg` to `undefined`.\r\n    thisArg = thisArg || undefined;\r\n\r\n    // Lookup the list of receivers, and bail if none exist.\r\n    let receivers = receiversForSender.get(signal.sender);\r\n    if (!receivers || receivers.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // Bail if no matching connection exits.\r\n    let connection = findConnection(receivers, signal, slot, thisArg);\r\n    if (!connection) {\r\n      return false;\r\n    }\r\n\r\n    // Choose the best object for the receiver.\r\n    let receiver = thisArg || slot;\r\n\r\n    // Lookup the array of senders, which is now known to exist.\r\n    let senders = sendersForReceiver.get(receiver)!;\r\n\r\n    // Clear the connection and schedule cleanup of the arrays.\r\n    connection.signal = null;\r\n    scheduleCleanup(receivers);\r\n    scheduleCleanup(senders);\r\n\r\n    // Indicate a successful disconnection.\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove all connections between a sender and receiver.\r\n   *\r\n   * @param sender - The sender object of interest.\r\n   *\r\n   * @param receiver - The receiver object of interest.\r\n   */\r\n  export\r\n  function disconnectBetween(sender: any, receiver: any): void {\r\n    // If there are no receivers, there is nothing to do.\r\n    let receivers = receiversForSender.get(sender);\r\n    if (!receivers || receivers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // If there are no senders, there is nothing to do.\r\n    let senders = sendersForReceiver.get(receiver);\r\n    if (!senders || senders.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Clear each connection between the sender and receiver.\r\n    each(senders, connection => {\r\n      // Skip connections which have already been cleared.\r\n      if (!connection.signal) {\r\n        return;\r\n      }\r\n\r\n      // Clear the connection if it matches the sender.\r\n      if (connection.signal.sender === sender) {\r\n        connection.signal = null;\r\n      }\r\n    });\r\n\r\n    // Schedule a cleanup of the senders and receivers.\r\n    scheduleCleanup(receivers);\r\n    scheduleCleanup(senders);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where the given object is the sender.\r\n   *\r\n   * @param sender - The sender object of interest.\r\n   */\r\n  export\r\n  function disconnectSender(sender: any): void {\r\n    // If there are no receivers, there is nothing to do.\r\n    let receivers = receiversForSender.get(sender);\r\n    if (!receivers || receivers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Clear each receiver connection.\r\n    each(receivers, connection => {\r\n      // Skip connections which have already been cleared.\r\n      if (!connection.signal) {\r\n        return;\r\n      }\r\n\r\n      // Choose the best object for the receiver.\r\n      let receiver = connection.thisArg || connection.slot;\r\n\r\n      // Clear the connection.\r\n      connection.signal = null;\r\n\r\n      // Cleanup the array of senders, which is now known to exist.\r\n      scheduleCleanup(sendersForReceiver.get(receiver)!);\r\n    });\r\n\r\n    // Schedule a cleanup of the receivers.\r\n    scheduleCleanup(receivers);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where the given object is the receiver.\r\n   *\r\n   * @param receiver - The receiver object of interest.\r\n   */\r\n  export\r\n  function disconnectReceiver(receiver: any): void {\r\n    // If there are no senders, there is nothing to do.\r\n    let senders = sendersForReceiver.get(receiver);\r\n    if (!senders || senders.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Clear each sender connection.\r\n    each(senders, connection => {\r\n      // Skip connections which have already been cleared.\r\n      if (!connection.signal) {\r\n        return;\r\n      }\r\n\r\n      // Lookup the sender for the connection.\r\n      let sender = connection.signal.sender;\r\n\r\n      // Clear the connection.\r\n      connection.signal = null;\r\n\r\n      // Cleanup the array of receivers, which is now known to exist.\r\n      scheduleCleanup(receiversForSender.get(sender)!);\r\n    });\r\n\r\n    // Schedule a cleanup of the list of senders.\r\n    scheduleCleanup(senders);\r\n  }\r\n\r\n  /**\r\n   * Remove all connections where an object is the sender or receiver.\r\n   *\r\n   * @param object - The object of interest.\r\n   */\r\n  export\r\n  function disconnectAll(object: any): void {\r\n    // Remove all connections where the given object is the sender.\r\n    disconnectSender(object);\r\n    // Remove all connections where the given object is the receiver.\r\n    disconnectReceiver(object);\r\n  }\r\n\r\n  /**\r\n   * Emit a signal and invoke its connected slots.\r\n   *\r\n   * @param signal - The signal of interest.\r\n   *\r\n   * @param args - The args to pass to the connected slots.\r\n   *\r\n   * #### Notes\r\n   * Slots are invoked synchronously in connection order.\r\n   *\r\n   * Exceptions thrown by connected slots will be caught and logged.\r\n   */\r\n  export\r\n  function emit<T, U>(signal: Signal<T,  U>, args: U): void {\r\n    // If there are no receivers, there is nothing to do.\r\n    let receivers = receiversForSender.get(signal.sender);\r\n    if (!receivers || receivers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Invoke the slots for connections with a matching signal.\r\n    // Any connections added during emission are not invoked.\r\n    for (let i = 0, n = receivers.length; i < n; ++i) {\r\n      let connection = receivers[i];\r\n      if (connection.signal === signal) {\r\n        invokeSlot(connection, args);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * An object which holds connection data.\r\n   */\r\n  interface IConnection {\r\n    /**\r\n     * The signal for the connection.\r\n     *\r\n     * A `null` signal indicates a cleared connection.\r\n     */\r\n    signal: Signal<any, any> | null;\r\n\r\n    /**\r\n     * The slot connected to the signal.\r\n     */\r\n    readonly slot: Slot<any, any>;\r\n\r\n    /**\r\n     * The `this` context for the slot.\r\n     */\r\n    readonly thisArg: any;\r\n  }\r\n\r\n  /**\r\n   * A weak mapping of sender to array of receiver connections.\r\n   */\r\n  const receiversForSender = new WeakMap<any, IConnection[]>();\r\n\r\n  /**\r\n   * A weak mapping of receiver to array of sender connections.\r\n   */\r\n  const sendersForReceiver = new WeakMap<any, IConnection[]>();\r\n\r\n  /**\r\n   * A set of connection arrays which are pending cleanup.\r\n   */\r\n  const dirtySet = new Set<IConnection[]>();\r\n\r\n  /**\r\n   * A function to schedule an event loop callback.\r\n   */\r\n  const schedule = (() => {\r\n    let ok = typeof requestAnimationFrame === 'function';\r\n    // @ts-ignore\r\n    return ok ? requestAnimationFrame : setImmediate;\r\n  })();\r\n\r\n  /**\r\n   * Find a connection which matches the given parameters.\r\n   */\r\n  function findConnection(connections: IConnection[], signal: Signal<any, any>, slot: Slot<any, any>, thisArg: any): IConnection | undefined {\r\n    return find(connections, connection => (\r\n      connection.signal === signal &&\r\n      connection.slot === slot &&\r\n      connection.thisArg === thisArg\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Invoke a slot with the given parameters.\r\n   *\r\n   * The connection is assumed to be valid.\r\n   *\r\n   * Exceptions in the slot will be caught and logged.\r\n   */\r\n  function invokeSlot(connection: IConnection, args: any): void {\r\n    let { signal, slot, thisArg } = connection;\r\n    try {\r\n      slot.call(thisArg, signal!.sender, args);\r\n    } catch (err) {\r\n      exceptionHandler(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a cleanup of a connection array.\r\n   *\r\n   * This will add the array to the dirty set and schedule a deferred\r\n   * cleanup of the array contents. On cleanup, any connection with a\r\n   * `null` signal will be removed from the array.\r\n   */\r\n  function scheduleCleanup(array: IConnection[]): void {\r\n    if (dirtySet.size === 0) {\r\n      schedule(cleanupDirtySet);\r\n    }\r\n    dirtySet.add(array);\r\n  }\r\n\r\n  /**\r\n   * Cleanup the connection lists in the dirty set.\r\n   *\r\n   * This function should only be invoked asynchronously, when the\r\n   * stack frame is guaranteed to not be on the path of user code.\r\n   */\r\n  function cleanupDirtySet(): void {\r\n    dirtySet.forEach(cleanupConnections);\r\n    dirtySet.clear();\r\n  }\r\n\r\n  /**\r\n   * Cleanup the dirty connections in a connections array.\r\n   *\r\n   * This will remove any connection with a `null` signal.\r\n   *\r\n   * This function should only be invoked asynchronously, when the\r\n   * stack frame is guaranteed to not be on the path of user code.\r\n   */\r\n  function cleanupConnections(connections: IConnection[]): void {\r\n    ArrayExt.removeAllWhere(connections, isDeadConnection);\r\n  }\r\n\r\n  /**\r\n   * Test whether a connection is dead.\r\n   *\r\n   * A dead connection has a `null` signal.\r\n   */\r\n  function isDeadConnection(connection: IConnection): boolean {\r\n    return connection.signal === null;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}