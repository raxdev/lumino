{"version":3,"file":"index.es6.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  MimeData\r\n} from '@lumino/coreutils';\r\n\r\nimport {\r\n  DisposableDelegate, IDisposable\r\n} from '@lumino/disposable';\r\n\r\n\r\n/**\r\n * A type alias which defines the possible independent drop actions.\r\n */\r\nexport\r\ntype DropAction = 'none' | 'copy' | 'link' | 'move';\r\n\r\n\r\n/**\r\n * A type alias which defines the possible supported drop actions.\r\n */\r\nexport\r\ntype SupportedActions = DropAction | 'copy-link' | 'copy-move' | 'link-move' | 'all';\r\n\r\n\r\n/**\r\n * A custom event type used for drag-drop operations.\r\n *\r\n * #### Notes\r\n * In order to receive `'lm-dragover'`, `'lm-dragleave'`, or `'lm-drop'`\r\n * events, a drop target must cancel the `'lm-dragenter'` event by\r\n * calling the event's `preventDefault()` method.\r\n */\r\nexport\r\ninterface IDragEvent extends MouseEvent {\r\n  /**\r\n   * The drop action supported or taken by the drop target.\r\n   *\r\n   * #### Notes\r\n   * At the start of each event, this value will be `'none'`. During a\r\n   * `'lm-dragover'` event, the drop target must set this value to one\r\n   * of the supported actions, or the drop event will not occur.\r\n   *\r\n   * When handling the drop event, the drop target should set this\r\n   * to the action which was *actually* taken. This value will be\r\n   * reported back to the drag initiator.\r\n   */\r\n  dropAction: DropAction;\r\n\r\n  /**\r\n   * The drop action proposed by the drag initiator.\r\n   *\r\n   * #### Notes\r\n   * This is the action which is *preferred* by the drag initiator. The\r\n   * drop target is not required to perform this action, but should if\r\n   * it all possible.\r\n   */\r\n  readonly proposedAction: DropAction;\r\n\r\n  /**\r\n   * The drop actions supported by the drag initiator.\r\n   *\r\n   * #### Notes\r\n   * If the `dropAction` is not set to one of the supported actions\r\n   * during the `'lm-dragover'` event, the drop event will not occur.\r\n   */\r\n  readonly supportedActions: SupportedActions;\r\n\r\n  /**\r\n   * The mime data associated with the event.\r\n   *\r\n   * #### Notes\r\n   * This is mime data provided by the drag initiator. Drop targets\r\n   * should use this data to determine if they can handle the drop.\r\n   */\r\n  readonly mimeData: MimeData;\r\n\r\n  /**\r\n   * The source object of the drag, as provided by the drag initiator.\r\n   *\r\n   * #### Notes\r\n   * For advanced applications, the drag initiator may wish to expose\r\n   * a source object to the drop targets. That will be provided here\r\n   * if given by the drag initiator, otherwise it will be `null`.\r\n   */\r\n  readonly source: any;\r\n}\r\n\r\n\r\n/**\r\n * An object which manages a drag-drop operation.\r\n *\r\n * A drag object dispatches four different events to drop targets:\r\n *\r\n * - `'lm-dragenter'` - Dispatched when the mouse enters the target\r\n *   element. This event must be canceled in order to receive any\r\n *   of the other events.\r\n *\r\n * - `'lm-dragover'` - Dispatched when the mouse moves over the drop\r\n *   target. It must cancel the event and set the `dropAction` to one\r\n *   of the supported actions in order to receive drop events.\r\n *\r\n * - `'lm-dragleave'` - Dispatched when the mouse leaves the target\r\n *   element. This includes moving the mouse into child elements.\r\n *\r\n * - `'lm-drop'`- Dispatched when the mouse is released over the target\r\n *   element when the target indicates an appropriate drop action. If\r\n *   the event is canceled, the indicated drop action is returned to\r\n *   the initiator through the resolved promise.\r\n *\r\n * A drag operation can be terminated at any time by pressing `Escape`\r\n * or by disposing the drag object.\r\n *\r\n * A drag object has the ability to automatically scroll a scrollable\r\n * element when the mouse is hovered near one of its edges. To enable\r\n * this, add the `data-lm-dragscroll` attribute to any element which\r\n * the drag object should consider for scrolling.\r\n *\r\n * #### Notes\r\n * This class is designed to be used when dragging and dropping custom\r\n * data *within* a single application. It is *not* a replacement for\r\n * the native drag-drop API. Instead, it provides an API which allows\r\n * drag operations to be initiated programmatically and enables the\r\n * transfer of arbitrary non-string objects; features which are not\r\n * possible with the native drag-drop API.\r\n */\r\nexport\r\nclass Drag implements IDisposable {\r\n  /**\r\n   * Construct a new drag object.\r\n   *\r\n   * @param options - The options for initializing the drag.\r\n   */\r\n  constructor(options: Drag.IOptions) {\r\n    this.mimeData = options.mimeData;\r\n    this.dragImage = options.dragImage || null;\r\n    this.proposedAction = options.proposedAction || 'copy';\r\n    this.supportedActions = options.supportedActions || 'all';\r\n    this.source = options.source || null;\r\n  }\r\n\r\n  /**\r\n   * Dispose of the resources held by the drag object.\r\n   *\r\n   * #### Notes\r\n   * This will cancel the drag operation if it is active.\r\n   */\r\n  dispose(): void {\r\n    // Do nothing if the drag object is already disposed.\r\n    if (this._disposed) {\r\n      return;\r\n    }\r\n    this._disposed = true;\r\n\r\n    // If there is a current target, dispatch a drag leave event.\r\n    if (this._currentTarget) {\r\n      let event = Private.createMouseEvent('mouseup', -1, -1);\r\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\r\n    }\r\n\r\n    // Finalize the drag object with `'none'`.\r\n    this._finalize('none');\r\n  }\r\n\r\n  /**\r\n   * The mime data for the drag object.\r\n   */\r\n  readonly mimeData: MimeData;\r\n\r\n  /**\r\n   * The drag image element for the drag object.\r\n   */\r\n  readonly dragImage: HTMLElement | null;\r\n\r\n  /**\r\n   * The proposed drop action for the drag object.\r\n   */\r\n  readonly proposedAction: DropAction;\r\n\r\n  /**\r\n   * The supported drop actions for the drag object.\r\n   */\r\n  readonly supportedActions: SupportedActions;\r\n\r\n  /**\r\n   * Get the drag source for the drag object.\r\n   */\r\n  readonly source: any;\r\n\r\n  /**\r\n   * Test whether the drag object is disposed.\r\n   */\r\n  get isDisposed(): boolean {\r\n    return this._disposed;\r\n  }\r\n\r\n  /**\r\n   * Start the drag operation at the specified client position.\r\n   *\r\n   * @param clientX - The client X position for the drag start.\r\n   *\r\n   * @param clientY - The client Y position for the drag start.\r\n   *\r\n   * @returns A promise which resolves to the result of the drag.\r\n   *\r\n   * #### Notes\r\n   * If the drag has already been started, the promise created by the\r\n   * first call to `start` is returned.\r\n   *\r\n   * If the drag operation has ended, or if the drag object has been\r\n   * disposed, the returned promise will resolve to `'none'`.\r\n   *\r\n   * The drag object will be automatically disposed when drag operation\r\n   * completes. This means `Drag` objects are for single-use only.\r\n   *\r\n   * This method assumes the left mouse button is already held down.\r\n   */\r\n  start(clientX: number, clientY: number): Promise<DropAction> {\r\n    // If the drag object is already disposed, resolve to `None`.\r\n    if (this._disposed) {\r\n      return Promise.resolve('none' as DropAction);\r\n    }\r\n\r\n    // If the drag has already been started, return the promise.\r\n    if (this._promise) {\r\n      return this._promise;\r\n    }\r\n\r\n    // Install the document listeners for the drag object.\r\n    this._addListeners();\r\n\r\n    // Attach the drag image at the specified client position.\r\n    this._attachDragImage(clientX, clientY);\r\n\r\n    // Create the promise which will be resolved on completion.\r\n    this._promise = new Promise<DropAction>((resolve, reject) => {\r\n      this._resolve = resolve;\r\n    });\r\n\r\n    // Trigger a fake move event to kick off the drag operation.\r\n    let event = Private.createMouseEvent('mousemove', clientX, clientY);\r\n    document.dispatchEvent(event);\r\n\r\n    // Return the pending promise for the drag operation.\r\n    return this._promise;\r\n  }\r\n\r\n  /**\r\n   * Handle the DOM events for the drag operation.\r\n   *\r\n   * @param event - The DOM event sent to the drag object.\r\n   *\r\n   * #### Notes\r\n   * This method implements the DOM `EventListener` interface and is\r\n   * called in response to events on the document. It should not be\r\n   * called directly by user code.\r\n   */\r\n  handleEvent(event: Event): void {\r\n    switch(event.type) {\r\n    case 'touchmove':\r\n      event = Drag.convertTouchToMouseEvent(event as TouchEvent);\r\n    case 'mousemove':\r\n      this._evtMouseMove(event as MouseEvent);\r\n      break;\r\n    case 'touchend':\r\n      event = Drag.convertTouchToMouseEvent(event as TouchEvent);\r\n    case 'mouseup':\r\n      this._evtMouseUp(event as MouseEvent);\r\n      break;\r\n    case 'keydown':\r\n      this._evtKeyDown(event as KeyboardEvent);\r\n      break;\r\n    default:\r\n      // Stop all other events during drag-drop.\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the drag image element to the specified location.\r\n   *\r\n   * This is a no-op if there is no drag image element.\r\n   */\r\n  protected moveDragImage(clientX: number, clientY: number): void {\r\n    if (!this.dragImage) {\r\n      return;\r\n    }\r\n    let style = this.dragImage.style;\r\n    style.top = `${clientY}px`;\r\n    style.left = `${clientX}px`;\r\n  }\r\n\r\n  /**\r\n   * Handle the `'mousemove'` event for the drag object.\r\n   */\r\n  private _evtMouseMove(event: MouseEvent): void {\r\n    // Stop all input events during drag-drop.\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Update the current target node and dispatch enter/leave events.\r\n    this._updateCurrentTarget(event);\r\n\r\n    // Update the drag scroll element.\r\n    this._updateDragScroll(event);\r\n\r\n    // Move the drag image to the specified client position. This is\r\n    // performed *after* dispatching to prevent unnecessary reflows.\r\n    this.moveDragImage(event.clientX, event.clientY);\r\n  }\r\n\r\n  /**\r\n   * Handle the `'mouseup'` event for the drag object.\r\n   */\r\n  private _evtMouseUp(event: MouseEvent): void {\r\n    // Stop all input events during drag-drop.\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Do nothing if the left button is not released.\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    // Update the current target node and dispatch enter/leave events.\r\n    // This prevents a subtle issue where the DOM mutates under the\r\n    // cursor after the last move event but before the drop event.\r\n    this._updateCurrentTarget(event);\r\n\r\n    // If there is no current target, finalize with `'none'`.\r\n    if (!this._currentTarget) {\r\n      this._finalize('none');\r\n      return;\r\n    }\r\n\r\n    // If the last drop action was `'none'`, dispatch a leave event\r\n    // to the current target and finalize the drag with `'none'`.\r\n    if (this._dropAction === 'none') {\r\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\r\n      this._finalize('none');\r\n      return;\r\n    }\r\n\r\n    // Dispatch the drop event at the current target and finalize\r\n    // with the resulting drop action.\r\n    let action = Private.dispatchDrop(this, this._currentTarget, event);\r\n    this._finalize(action);\r\n  }\r\n\r\n  /**\r\n   * Handle the `'keydown'` event for the drag object.\r\n   */\r\n  private _evtKeyDown(event: KeyboardEvent): void {\r\n    // Stop all input events during drag-drop.\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Cancel the drag if `Escape` is pressed.\r\n    if (event.keyCode === 27) {\r\n      this.dispose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the document event listeners for the drag object.\r\n   */\r\n  private _addListeners(): void {\r\n    document.addEventListener('mousedown', this, true);\r\n    document.addEventListener('mousemove', this, true);\r\n    document.addEventListener('mouseup', this, true);\r\n    document.addEventListener('mouseenter', this, true);\r\n    document.addEventListener('mouseleave', this, true);\r\n    document.addEventListener('mouseover', this, true);\r\n    document.addEventListener('mouseout', this, true);\r\n    document.addEventListener('touchstart', this, true);\r\n    document.addEventListener('touchmove', this, true);\r\n    document.addEventListener('touchend', this, true);\r\n    document.addEventListener('keydown', this, true);\r\n    document.addEventListener('keyup', this, true);\r\n    document.addEventListener('keypress', this, true);\r\n    document.addEventListener('contextmenu', this, true);\r\n  }\r\n\r\n  /**\r\n   * Remove the document event listeners for the drag object.\r\n   */\r\n  private _removeListeners(): void {\r\n    document.removeEventListener('mousedown', this, true);\r\n    document.removeEventListener('mousemove', this, true);\r\n    document.removeEventListener('mouseup', this, true);\r\n    document.removeEventListener('mouseenter', this, true);\r\n    document.removeEventListener('mouseleave', this, true);\r\n    document.removeEventListener('mouseover', this, true);\r\n    document.removeEventListener('mouseout', this, true);\r\n    document.removeEventListener('touchstart', this, true);\r\n    document.removeEventListener('touchmove', this, true);\r\n    document.removeEventListener('touchend', this, true);\r\n    document.removeEventListener('keydown', this, true);\r\n    document.removeEventListener('keyup', this, true);\r\n    document.removeEventListener('keypress', this, true);\r\n    document.removeEventListener('contextmenu', this, true);\r\n  }\r\n\r\n  /**\r\n   * Update the drag scroll element under the mouse.\r\n   */\r\n  private _updateDragScroll(event: MouseEvent): void {\r\n    // Find the scroll target under the mouse.\r\n    let target = Private.findScrollTarget(event);\r\n\r\n    // Bail if there is nothing to scroll.\r\n    if (!this._scrollTarget && !target) {\r\n      return;\r\n    }\r\n\r\n    // Start the scroll loop if needed.\r\n    if (!this._scrollTarget) {\r\n      setTimeout(this._onScrollFrame, 500);\r\n    }\r\n\r\n    // Update the scroll target.\r\n    this._scrollTarget = target;\r\n  }\r\n\r\n  /**\r\n   * Update the current target node using the given mouse event.\r\n   */\r\n  private _updateCurrentTarget(event: MouseEvent): void {\r\n    // Fetch common local state.\r\n    let prevTarget = this._currentTarget;\r\n    let currTarget = this._currentTarget;\r\n    let prevElem = this._currentElement;\r\n\r\n    // Find the current indicated element at the given position.\r\n    let currElem = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    // Update the current element reference.\r\n    this._currentElement = currElem;\r\n\r\n    // If the indicated element changes from the previous iteration,\r\n    // and is different from the current target, dispatch the exit\r\n    // event to the target.\r\n    if (currElem !== prevElem && currElem !== currTarget) {\r\n      Private.dispatchDragExit(this, currTarget, currElem, event);\r\n    }\r\n\r\n    // If the indicated element changes from the previous iteration,\r\n    // and is different from the current target, dispatch the enter\r\n    // event and compute the new target element.\r\n    if (currElem !== prevElem && currElem !== currTarget) {\r\n      currTarget = Private.dispatchDragEnter(this, currElem, currTarget, event);\r\n    }\r\n\r\n    // If the current target element has changed, update the current\r\n    // target reference and dispatch the leave event to the old target.\r\n    if (currTarget !== prevTarget) {\r\n      this._currentTarget = currTarget;\r\n      Private.dispatchDragLeave(this, prevTarget, currTarget, event);\r\n    }\r\n\r\n    // Dispatch the drag over event and update the drop action.\r\n    let action = Private.dispatchDragOver(this, currTarget, event);\r\n    this._setDropAction(action);\r\n  }\r\n\r\n  /**\r\n   * Attach the drag image element at the specified location.\r\n   *\r\n   * This is a no-op if there is no drag image element.\r\n   */\r\n  private _attachDragImage(clientX: number, clientY: number): void {\r\n    if (!this.dragImage) {\r\n      return;\r\n    }\r\n    this.dragImage.classList.add('lm-mod-drag-image');\r\n    /* <DEPRECATED> */\r\n    this.dragImage.classList.add('p-mod-drag-image');\r\n    /* </DEPRECATED> */\r\n    let style = this.dragImage.style;\r\n    style.pointerEvents = 'none';\r\n    style.position = 'fixed';\r\n    style.top = `${clientY}px`;\r\n    style.left = `${clientX}px`;\r\n    document.body.appendChild(this.dragImage);\r\n  }\r\n\r\n  /**\r\n   * Detach the drag image element from the DOM.\r\n   *\r\n   * This is a no-op if there is no drag image element.\r\n   */\r\n  private _detachDragImage(): void {\r\n    if (!this.dragImage) {\r\n      return;\r\n    }\r\n    let parent = this.dragImage.parentNode;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n    parent.removeChild(this.dragImage);\r\n  }\r\n\r\n  /**\r\n   * Set the internal drop action state and update the drag cursor.\r\n   */\r\n  private _setDropAction(action: DropAction): void {\r\n    action = Private.validateAction(action, this.supportedActions);\r\n    if (this._override && this._dropAction === action) {\r\n      return;\r\n    }\r\n    switch (action) {\r\n    case 'none':\r\n      this._dropAction = action;\r\n      this._override = Drag.overrideCursor('no-drop');\r\n      break;\r\n    case 'copy':\r\n      this._dropAction = action;\r\n      this._override = Drag.overrideCursor('copy');\r\n      break;\r\n    case 'link':\r\n      this._dropAction = action;\r\n      this._override = Drag.overrideCursor('alias');\r\n      break;\r\n    case 'move':\r\n      this._dropAction = action;\r\n      this._override = Drag.overrideCursor('move');\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finalize the drag operation and resolve the drag promise.\r\n   */\r\n  private _finalize(action: DropAction): void {\r\n    // Store the resolve function as a temp variable.\r\n    let resolve = this._resolve;\r\n\r\n    // Remove the document event listeners.\r\n    this._removeListeners();\r\n\r\n    // Detach the drag image.\r\n    this._detachDragImage();\r\n\r\n    // Dispose of the cursor override.\r\n    if (this._override) {\r\n      this._override.dispose();\r\n      this._override = null;\r\n    }\r\n\r\n    // Clear the mime data.\r\n    this.mimeData.clear();\r\n\r\n    // Clear the rest of the internal drag state.\r\n    this._disposed = true;\r\n    this._dropAction = 'none';\r\n    this._currentTarget = null;\r\n    this._currentElement = null;\r\n    this._scrollTarget = null;\r\n    this._promise = null;\r\n    this._resolve = null;\r\n\r\n    // Finally, resolve the promise to the given drop action.\r\n    if (resolve) {\r\n      resolve(action);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The scroll loop handler function.\r\n   */\r\n  private _onScrollFrame = () => {\r\n    // Bail early if there is no scroll target.\r\n    if (!this._scrollTarget) {\r\n      return;\r\n    }\r\n\r\n    // Unpack the scroll target.\r\n    let { element, edge, distance } = this._scrollTarget;\r\n\r\n    // Calculate the scroll delta using nonlinear acceleration.\r\n    let d = Private.SCROLL_EDGE_SIZE - distance;\r\n    let f = Math.pow(d / Private.SCROLL_EDGE_SIZE, 2);\r\n    let s = Math.max(1, Math.round(f * Private.SCROLL_EDGE_SIZE));\r\n\r\n    // Scroll the element in the specified direction.\r\n    switch (edge) {\r\n    case 'top':\r\n      element.scrollTop -= s;\r\n      break;\r\n    case 'left':\r\n      element.scrollLeft -= s;\r\n      break;\r\n    case 'right':\r\n      element.scrollLeft += s;\r\n      break;\r\n    case 'bottom':\r\n      element.scrollTop += s;\r\n      break;\r\n    }\r\n\r\n    // Request the next cycle of the scroll loop.\r\n    requestAnimationFrame(this._onScrollFrame);\r\n  };\r\n\r\n  private _disposed = false;\r\n  private _dropAction: DropAction = 'none';\r\n  private _override: IDisposable | null = null;\r\n  private _currentTarget: Element | null = null;\r\n  private _currentElement: Element | null = null;\r\n  private _promise: Promise<DropAction> | null = null;\r\n  private _scrollTarget: Private.IScrollTarget | null = null;\r\n  private _resolve: ((value: DropAction) => void) | null = null;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `Drag` class statics.\r\n */\r\nexport\r\nnamespace Drag {\r\n  /**\r\n   * An options object for initializing a `Drag` object.\r\n   */\r\n  export\r\n  interface IOptions {\r\n    /**\r\n     * The populated mime data for the drag operation.\r\n     */\r\n    mimeData: MimeData;\r\n\r\n    /**\r\n     * An optional drag image which follows the mouse cursor.\r\n     *\r\n     * #### Notes\r\n     * The drag image can be any DOM element. It is not limited to\r\n     * image or canvas elements as with the native drag-drop APIs.\r\n     *\r\n     * If provided, this will be positioned at the mouse cursor on each\r\n     * mouse move event. A CSS transform can be used to offset the node\r\n     * from its specified position.\r\n     *\r\n     * The drag image will automatically have the `lm-mod-drag-image`\r\n     * class name added.\r\n     *\r\n     * The default value is `null`.\r\n     */\r\n    dragImage?: HTMLElement;\r\n\r\n    /**\r\n     * The optional proposed drop action for the drag operation.\r\n     *\r\n     * #### Notes\r\n     * This can be provided as a hint to the drop targets as to which\r\n     * drop action is preferred.\r\n     *\r\n     * The default value is `'copy'`.\r\n     */\r\n    proposedAction?: DropAction;\r\n\r\n    /**\r\n     * The drop actions supported by the drag initiator.\r\n     *\r\n     * #### Notes\r\n     * A drop target must indicate that it intends to perform one of the\r\n     * supported actions in order to receive a drop event. However, it is\r\n     * not required to *actually* perform that action when handling the\r\n     * drop event. Therefore, the initiator must be prepared to handle\r\n     * any drop action performed by a drop target.\r\n     *\r\n     * The default value is `'all'`.\r\n     */\r\n    supportedActions?: SupportedActions;\r\n\r\n    /**\r\n     * An optional object which indicates the source of the drag.\r\n     *\r\n     * #### Notes\r\n     * For advanced applications, the drag initiator may wish to expose\r\n     * a source object to the drop targets. That object can be specified\r\n     * here and will be carried along with the drag events.\r\n     *\r\n     * The default value is `null`.\r\n     */\r\n    source?: any;\r\n  }\r\n\r\n  /**\r\n   * Override the cursor icon for the entire document.\r\n   *\r\n   * @param cursor - The string representing the cursor style.\r\n   *\r\n   * @returns A disposable which will clear the override when disposed.\r\n   *\r\n   * #### Notes\r\n   * The most recent call to `overrideCursor` takes precedence.\r\n   * Disposing an old override has no effect on the current override.\r\n   *\r\n   * This utility function is used by the `Drag` class to override the\r\n   * mouse cursor during a drag-drop operation, but it can also be used\r\n   * by other classes to fix the cursor icon during normal mouse drags.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * import { Drag } from '@lumino/dragdrop';\r\n   *\r\n   * // Force the cursor to be 'wait' for the entire document.\r\n   * let override = Drag.overrideCursor('wait');\r\n   *\r\n   * // Clear the override by disposing the return value.\r\n   * override.dispose();\r\n   * ```\r\n   */\r\n  export\r\n  function overrideCursor(cursor: string): IDisposable {\r\n    let id = ++overrideCursorID;\r\n    document.body.style.cursor = cursor;\r\n    document.body.classList.add('lm-mod-override-cursor');\r\n    /* <DEPRECATED> */\r\n    document.body.classList.add('p-mod-override-cursor');\r\n    /* </DEPRECATED> */\r\n    return new DisposableDelegate(() => {\r\n      if (id === overrideCursorID) {\r\n        document.body.style.cursor = '';\r\n        document.body.classList.remove('lm-mod-override-cursor');\r\n        /* <DEPRECATED> */\r\n        document.body.classList.remove('p-mod-override-cursor');\r\n        /* </DEPRECATED> */\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Converts a TouchEvent to a MouseEvent to simplify mobile touch event handling.\r\n   */\r\n  export\r\n  function convertTouchToMouseEvent(touch: TouchEvent): MouseEvent {\r\n    let touches = touch.touches;\r\n    if (touches.length === 0) touches = touch.changedTouches; // touchEnd has no touches :facepalm:\r\n    let mouse = new MouseEvent('fake-mouse', {\r\n      button: 0, // why not be a left click :shrug:\r\n      clientX: touches[0].clientX,\r\n      clientY: touches[0].clientY,\r\n    });\r\n\r\n    // Forcefully add mouse event properties.\r\n    (mouse as any).preventDefault = touch.preventDefault;\r\n    (mouse as any).stopPropagation = touch.stopPropagation;\r\n\r\n    // target is supposed to be readOnly, set it with js hackery\r\n    Object.defineProperty(mouse, 'target', {value: touch.target, writable: false});\r\n\r\n    return mouse;\r\n  }\r\n\r\n  /**\r\n   * The internal id for the active cursor override.\r\n   */\r\n  let overrideCursorID = 0;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * The size of a drag scroll edge, in pixels.\r\n   */\r\n  export\r\n  const SCROLL_EDGE_SIZE = 20;\r\n\r\n  /**\r\n   * Validate the given action is one of the supported actions.\r\n   *\r\n   * Returns the given action or `'none'` if the action is unsupported.\r\n   */\r\n  export\r\n  function validateAction(action: DropAction, supported: SupportedActions): DropAction {\r\n    return (actionTable[action] & supportedTable[supported]) ? action : 'none';\r\n  }\r\n\r\n  /**\r\n   * Create a left mouse event at the given position.\r\n   *\r\n   * @param type - The event type for the mouse event.\r\n   *\r\n   * @param clientX - The client X position.\r\n   *\r\n   * @param clientY - The client Y position.\r\n   *\r\n   * @returns A newly created and initialized mouse event.\r\n   */\r\n  export\r\n  function createMouseEvent(type: string, clientX: number, clientY: number): MouseEvent {\r\n    let event = document.createEvent('MouseEvent');\r\n    event.initMouseEvent(type, true, true, window, 0, 0, 0,\r\n      clientX, clientY, false, false, false, false, 0, null);\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * An object which holds the scroll target data.\r\n   */\r\n  export\r\n  interface IScrollTarget {\r\n    /**\r\n     * The element to be scrolled.\r\n     */\r\n    element: Element;\r\n\r\n    /**\r\n     * The scroll edge underneath the mouse.\r\n     */\r\n    edge: 'top' | 'left' | 'right' | 'bottom';\r\n\r\n    /**\r\n     * The distance from the mouse to the scroll edge.\r\n     */\r\n    distance: number;\r\n  }\r\n\r\n  /**\r\n   * Find the drag scroll target under the mouse, if any.\r\n   */\r\n  export\r\n  function findScrollTarget(event: MouseEvent): IScrollTarget | null {\r\n    // Look up the client mouse position.\r\n    let x = event.clientX;\r\n    let y = event.clientY;\r\n\r\n    // Get the element under the mouse.\r\n    let element: Element | null = document.elementFromPoint(x, y);\r\n\r\n    // Search for a scrollable target based on the mouse position.\r\n    // The null assert in third clause of for-loop is required due to:\r\n    // https://github.com/Microsoft/TypeScript/issues/14143\r\n    for (; element; element = element!.parentElement) {\r\n      // Ignore elements which are not marked as scrollable.\r\n      let scrollable = element.hasAttribute('data-lm-dragscroll');\r\n      /* <DEPRECATED> */\r\n      scrollable = scrollable || element.hasAttribute('data-p-dragscroll');\r\n      /* </DEPRECATED> */\r\n      if (!scrollable) {\r\n        continue;\r\n      }\r\n\r\n      // Set up the coordinate offsets for the element.\r\n      let offsetX = 0;\r\n      let offsetY = 0;\r\n      if (element === document.body) {\r\n        offsetX = window.pageXOffset;\r\n        offsetY = window.pageYOffset;\r\n      }\r\n\r\n      // Get the element bounds in viewport coordinates.\r\n      let r = element.getBoundingClientRect();\r\n      let top = r.top + offsetY;\r\n      let left = r.left + offsetX;\r\n      let right = left + r.width;\r\n      let bottom = top + r.height;\r\n\r\n      // Skip the element if it's not under the mouse.\r\n      if (x < left || x >= right || y < top || y >= bottom) {\r\n        continue;\r\n      }\r\n\r\n      // Compute the distance to each edge.\r\n      let dl = x - left + 1;\r\n      let dt = y - top + 1;\r\n      let dr = right - x;\r\n      let db = bottom - y;\r\n\r\n      // Find the smallest of the edge distances.\r\n      let distance = Math.min(dl, dt, dr, db);\r\n\r\n      // Skip the element if the mouse is not within a scroll edge.\r\n      if (distance > SCROLL_EDGE_SIZE) {\r\n        continue;\r\n      }\r\n\r\n      // Set up the edge result variable.\r\n      let edge: 'top' | 'left' | 'right' | 'bottom';\r\n\r\n      // Find the edge for the computed distance.\r\n      switch (distance) {\r\n      case db:\r\n        edge = 'bottom';\r\n        break;\r\n      case dt:\r\n        edge = 'top';\r\n        break;\r\n      case dr:\r\n        edge = 'right';\r\n        break;\r\n      case dl:\r\n        edge = 'left';\r\n        break;\r\n      default:\r\n        throw 'unreachable';\r\n      }\r\n\r\n      // Compute how much the element can scroll in width and height.\r\n      let dsw = element.scrollWidth - element.clientWidth;\r\n      let dsh = element.scrollHeight - element.clientHeight;\r\n\r\n      // Determine if the element should be scrolled for the edge.\r\n      let shouldScroll: boolean;\r\n      switch (edge) {\r\n      case 'top':\r\n        shouldScroll = dsh > 0 && element.scrollTop > 0;\r\n        break;\r\n      case 'left':\r\n        shouldScroll = dsw > 0 && element.scrollLeft > 0;\r\n        break;\r\n      case 'right':\r\n        shouldScroll = dsw > 0 && element.scrollLeft < dsw;\r\n        break;\r\n      case 'bottom':\r\n        shouldScroll = dsh > 0 && element.scrollTop < dsh;\r\n        break;\r\n      default:\r\n        throw 'unreachable';\r\n      }\r\n\r\n      // Skip the element if it should not be scrolled.\r\n      if (!shouldScroll) {\r\n        continue;\r\n      }\r\n\r\n      // Return the drag scroll target.\r\n      return { element, edge, distance };\r\n    }\r\n\r\n    // No drag scroll target was found.\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drag enter event to the indicated element.\r\n   *\r\n   * @param drag - The drag object associated with the action.\r\n   *\r\n   * @param currElem - The currently indicated element, or `null`. This\r\n   *   is the \"immediate user selection\" from the whatwg spec.\r\n   *\r\n   * @param currTarget - The current drag target element, or `null`. This\r\n   *   is the \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param event - The mouse event related to the action.\r\n   *\r\n   * @returns The element to use as the current drag target. This is the\r\n   *   \"current target element\" from the whatwg spec, and may be `null`.\r\n   *\r\n   * #### Notes\r\n   * This largely implements the drag enter portion of the whatwg spec:\r\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n   */\r\n  export\r\n  function dispatchDragEnter(drag: Drag, currElem: Element | null, currTarget: Element | null, event: MouseEvent): Element | null {\r\n    // If the current element is null, return null as the new target.\r\n    if (!currElem) {\r\n      return null;\r\n    }\r\n\r\n    // Dispatch a drag enter event to the current element.\r\n    let dragEvent = createDragEvent('lm-dragenter', drag, event, currTarget);\r\n    let canceled = !currElem.dispatchEvent(dragEvent);\r\n\r\n    // If the event was canceled, use the current element as the new target.\r\n    if (canceled) {\r\n      return currElem;\r\n    }\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\r\n    canceled = !currElem.dispatchEvent(dragEvent);\r\n    if (canceled) {\r\n      return currElem;\r\n    }\r\n    /* </DEPRECATED> */\r\n\r\n    // If the current element is the document body, keep the original target.\r\n    if (currElem === document.body) {\r\n      return currTarget;\r\n    }\r\n\r\n    // Dispatch a drag enter event on the document body.\r\n    dragEvent = createDragEvent('lm-dragenter', drag, event, currTarget);\r\n    document.body.dispatchEvent(dragEvent);\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\r\n    document.body.dispatchEvent(dragEvent);\r\n    /* </DEPRECATED> */\r\n\r\n    // Ignore the event cancellation, and use the body as the new target.\r\n    return document.body;\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drag exit event to the indicated element.\r\n   *\r\n   * @param drag - The drag object associated with the action.\r\n   *\r\n   * @param prevTarget - The previous target element, or `null`. This\r\n   *   is the previous \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param currTarget - The current drag target element, or `null`. This\r\n   *   is the \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param event - The mouse event related to the action.\r\n   *\r\n   * #### Notes\r\n   * This largely implements the drag exit portion of the whatwg spec:\r\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n   */\r\n  export\r\n  function dispatchDragExit(drag: Drag, prevTarget: Element | null, currTarget: Element | null, event: MouseEvent): void {\r\n    // If the previous target is null, do nothing.\r\n    if (!prevTarget) {\r\n      return;\r\n    }\r\n\r\n    // Dispatch the drag exit event to the previous target.\r\n    let dragEvent = createDragEvent('lm-dragexit', drag, event, currTarget);\r\n    prevTarget.dispatchEvent(dragEvent);\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-dragexit', drag, event, currTarget);\r\n    prevTarget.dispatchEvent(dragEvent);\r\n    /* </DEPRECATED> */\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drag leave event to the indicated element.\r\n   *\r\n   * @param drag - The drag object associated with the action.\r\n   *\r\n   * @param prevTarget - The previous target element, or `null`. This\r\n   *   is the previous \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param currTarget - The current drag target element, or `null`. This\r\n   *   is the \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param event - The mouse event related to the action.\r\n   *\r\n   * #### Notes\r\n   * This largely implements the drag leave portion of the whatwg spec:\r\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n   */\r\n  export\r\n  function dispatchDragLeave(drag: Drag, prevTarget: Element | null, currTarget: Element | null, event: MouseEvent): void {\r\n    // If the previous target is null, do nothing.\r\n    if (!prevTarget) {\r\n      return;\r\n    }\r\n\r\n    // Dispatch the drag leave event to the previous target.\r\n    let dragEvent = createDragEvent('lm-dragleave', drag, event, currTarget);\r\n    prevTarget.dispatchEvent(dragEvent);\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-dragleave', drag, event, currTarget);\r\n    prevTarget.dispatchEvent(dragEvent);\r\n    /* </DEPRECATED> */\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drag over event to the indicated element.\r\n   *\r\n   * @param drag - The drag object associated with the action.\r\n   *\r\n   * @param currTarget - The current drag target element, or `null`. This\r\n   *   is the \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param event - The mouse event related to the action.\r\n   *\r\n   * @returns The `DropAction` result of the drag over event.\r\n   *\r\n   * #### Notes\r\n   * This largely implements the drag over portion of the whatwg spec:\r\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n   */\r\n  export\r\n  function dispatchDragOver(drag: Drag, currTarget: Element | null, event: MouseEvent): DropAction {\r\n    // If there is no current target, the drop action is none.\r\n    if (!currTarget) {\r\n      return 'none';\r\n    }\r\n\r\n    // Dispatch the drag over event to the current target.\r\n    let dragEvent = createDragEvent('lm-dragover', drag, event, null);\r\n    let canceled = !currTarget.dispatchEvent(dragEvent);\r\n\r\n    // If the event was canceled, return the drop action result.\r\n    if (canceled) {\r\n      return dragEvent.dropAction;\r\n    }\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-dragover', drag, event, null);\r\n    canceled = !currTarget.dispatchEvent(dragEvent);\r\n    if (canceled) {\r\n      return dragEvent.dropAction;\r\n    }\r\n    /* </DEPRECATED> */\r\n\r\n    // Otherwise, the effective drop action is none.\r\n    return 'none';\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drop event to the indicated element.\r\n   *\r\n   * @param drag - The drag object associated with the action.\r\n   *\r\n   * @param currTarget - The current drag target element, or `null`. This\r\n   *   is the \"current target element\" from the whatwg spec.\r\n   *\r\n   * @param event - The mouse event related to the action.\r\n   *\r\n   * @returns The `DropAction` result of the drop event.\r\n   *\r\n   * #### Notes\r\n   * This largely implements the drag over portion of the whatwg spec:\r\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n   */\r\n  export\r\n  function dispatchDrop(drag: Drag, currTarget: Element | null, event: MouseEvent): DropAction {\r\n    // If there is no current target, the drop action is none.\r\n    if (!currTarget) {\r\n      return 'none';\r\n    }\r\n\r\n    // Dispatch the drop event to the current target.\r\n    let dragEvent = createDragEvent('lm-drop', drag, event, null);\r\n    let canceled = !currTarget.dispatchEvent(dragEvent);\r\n\r\n    // If the event was canceled, return the drop action result.\r\n    if (canceled) {\r\n      return dragEvent.dropAction;\r\n    }\r\n\r\n    /* <DEPRECATED> */\r\n    dragEvent = createDragEvent('p-drop', drag, event, null);\r\n    canceled = !currTarget.dispatchEvent(dragEvent);\r\n    if (canceled) {\r\n      return dragEvent.dropAction;\r\n    }\r\n    /* </DEPRECATED> */\r\n\r\n    // Otherwise, the effective drop action is none.\r\n    return 'none';\r\n  }\r\n\r\n  /**\r\n   * A lookup table from drop action to bit value.\r\n   */\r\n  const actionTable: { [key: string]: number } = {\r\n    'none': 0x0,\r\n    'copy': 0x1,\r\n    'link': 0x2,\r\n    'move': 0x4\r\n  };\r\n\r\n  /**\r\n   * A lookup table from supported action to drop action bit mask.\r\n   */\r\n  const supportedTable: { [key: string]: number } = {\r\n    'none': actionTable['none'],\r\n    'copy': actionTable['copy'],\r\n    'link': actionTable['link'],\r\n    'move': actionTable['move'],\r\n    'copy-link': actionTable['copy'] | actionTable['link'],\r\n    'copy-move': actionTable['copy'] | actionTable['move'],\r\n    'link-move': actionTable['link'] | actionTable['move'],\r\n    'all': actionTable['copy'] | actionTable['link'] | actionTable['move']\r\n  };\r\n\r\n  /**\r\n   * Create a new initialized `IDragEvent` from the given data.\r\n   *\r\n   * @param type - The event type for the drag event.\r\n   *\r\n   * @param drag - The drag object to use for seeding the drag data.\r\n   *\r\n   * @param event - The mouse event to use for seeding the mouse data.\r\n   *\r\n   * @param related - The related target for the event, or `null`.\r\n   *\r\n   * @returns A new object which implements `IDragEvent`.\r\n   */\r\n  function createDragEvent(type: string, drag: Drag, event: MouseEvent, related: Element | null): IDragEvent {\r\n    // Create a new mouse event to use as the drag event. Currently,\r\n    // JS engines do now allow user-defined Event subclasses.\r\n    let dragEvent = document.createEvent('MouseEvent');\r\n\r\n    // Initialize the mouse event data.\r\n    dragEvent.initMouseEvent(\r\n      type, true, true, window, 0,\r\n      event.screenX, event.screenY,\r\n      event.clientX, event.clientY,\r\n      event.ctrlKey, event.altKey,\r\n      event.shiftKey, event.metaKey,\r\n      event.button, related\r\n    );\r\n\r\n    // Forcefully add the custom drag event properties.\r\n    (dragEvent as any).dropAction = 'none';\r\n    (dragEvent as any).mimeData = drag.mimeData;\r\n    (dragEvent as any).proposedAction = drag.proposedAction;\r\n    (dragEvent as any).supportedActions = drag.supportedActions;\r\n    (dragEvent as any).source = drag.source;\r\n\r\n    // Return the fully initialized drag event.\r\n    return dragEvent as IDragEvent;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}