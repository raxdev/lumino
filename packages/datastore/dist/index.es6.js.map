{"version":3,"file":"index.es6.js","sources":["../src/schema.ts","../../../node_modules/tslib/tslib.es6.js","../src/table.ts","../src/utilities.ts","../src/datastore.ts","../src/field.ts","../src/listfield.ts","../src/mapfield.ts","../src/registerfield.ts","../src/textfield.ts","../src/fields.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  AnyField\r\n} from './field';\r\n\r\n\r\n/**\r\n * A type definition for a table schema.\r\n *\r\n * #### Notes\r\n * The datastore assumes that peers may safely collaborate on tables\r\n * which share the same schema `id`.\r\n *\r\n * The schema `id` must be changed whenever changes are made to the\r\n * schema, or undefined behavior will result.\r\n */\r\nexport\r\ntype Schema = {\r\n  /**\r\n   * The unique identifier for the schema.\r\n   */\r\n  readonly id: string;\r\n\r\n  /**\r\n   * The field definitions for the schema.\r\n   *\r\n   * #### Notes\r\n   * Field names cannot begin with `$` or `@`.\r\n   */\r\n  readonly fields: { readonly [name: string]: AnyField };\r\n};\r\n\r\nconst invalidFieldnameLeads = ['$', '@'];\r\n\r\n/**\r\n * Validate a schema definition.\r\n */\r\nexport\r\nfunction validateSchema(schema: Schema): string[] {\r\n  const errors = [];\r\n  // Ensure that field names do not begin with `$` or `@`.\r\n  for (let name in schema.fields) {\r\n    if (invalidFieldnameLeads.indexOf(name[0]) !== -1) {\r\n      errors.push(\r\n        `Invalid field name: '${name}'. Cannot start field name with '${name[0]}'`\r\n      );\r\n    }\r\n  }\r\n  return errors;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  IIterable, IIterator, StringExt, IterableOrArrayLike\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  BPlusTree\r\n} from '@lumino/collections';\r\n\r\nimport {\r\n  Datastore\r\n} from './datastore';\r\n\r\nimport {\r\n  Record\r\n} from './record';\r\n\r\nimport {\r\n  Schema\r\n} from './schema';\r\n\r\n\r\n/**\r\n * A datastore object which holds a collection of records.\r\n */\r\nexport\r\nclass Table<S extends Schema> implements IIterable<Record<S>> {\r\n  /**\r\n   * @internal\r\n   *\r\n   * Create a new datastore table.\r\n   *\r\n   * @param schema - The schema for the table.\r\n   *\r\n   * @param context - The datastore context.\r\n   *\r\n   * @returns A new datastore table.\r\n   */\r\n  static create<U extends Schema>(schema: U, context: Datastore.Context): Table<U> {\r\n    return new Table<U>(schema, context);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Create a new datastore table with a previously exported state.\r\n   *\r\n   * @param schema - The schema for the table.\r\n   *\r\n   * @param context - The datastore context.\r\n   *\r\n   * @returns A new datastore table.\r\n   */\r\n  static recreate<U extends Schema>(schema: U, context: Datastore.Context, records: IterableOrArrayLike<Record<U>>): Table<U> {\r\n    return new Table<U>(schema, context, records);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Apply a patch to a datastore table.\r\n   *\r\n   * @param table - The table of interest.\r\n   *\r\n   * @param data - The patch to apply to the table.\r\n   *\r\n   * @returns The user-facing change to the table.\r\n   */\r\n  static patch<U extends Schema>(table: Table<U>, data: Table.Patch<U>): Table.Change<U> {\r\n    // Create the change object.\r\n    let tc: Table.MutableChange<U> = {};\r\n\r\n    // Fetch common variables.\r\n    let schema = table.schema;\r\n    let records = table._records;\r\n    let cmp = Private.recordIdCmp;\r\n\r\n    // Iterate over the dataset.\r\n    for (let id in data) {\r\n      // Get or create the old record.\r\n      let old = records.get(id, cmp) || Private.createRecord(schema, id);\r\n\r\n      // Apply the patch and create the new record.\r\n      let { record, change } = Private.applyPatch(schema, old, data[id]);\r\n\r\n      // Replace the old record in the table.\r\n      records.insert(record);\r\n\r\n      // Update the change object.\r\n      tc[id] = change;\r\n    }\r\n\r\n    // Return the change object.\r\n    return tc;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Unapply a patch to a datastore table, thereby undoing that patch.\r\n   *\r\n   * @param table - The table of interest.\r\n   *\r\n   * @param data - The patch to apply to the table.\r\n   *\r\n   * @returns The user-facing change to the table.\r\n   */\r\n  static unpatch<U extends Schema>(table: Table<U>, data: Table.Patch<U>): Table.Change<U> {\r\n    // Create the change object.\r\n    let tc: Table.MutableChange<U> = {};\r\n\r\n    // Fetch common variables.\r\n    let schema = table.schema;\r\n    let records = table._records;\r\n    let cmp = Private.recordIdCmp;\r\n\r\n    // Iterate over the dataset.\r\n    for (let id in data) {\r\n      // Get or create the old record.\r\n      let old = records.get(id, cmp) || Private.createRecord(schema, id);\r\n\r\n      // Apply the patch and create the new record.\r\n      let { record, change } = Private.unapplyPatch(schema, old, data[id]);\r\n\r\n      // Replace the old record in the table.\r\n      records.insert(record);\r\n\r\n      // Update the change object.\r\n      tc[id] = change;\r\n    }\r\n\r\n    // Return the change object.\r\n    return tc;\r\n  }\r\n  /**\r\n   * The schema for the table.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  readonly schema: S;\r\n\r\n  /**\r\n   * Whether the table is empty.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get isEmpty(): boolean {\r\n    return this._records.isEmpty;\r\n  }\r\n\r\n  /**\r\n   * The size of the table.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get size(): number {\r\n    return this._records.size;\r\n  }\r\n\r\n  /**\r\n   * Create an iterator over the records in the table.\r\n   *\r\n   * @returns A new iterator over the table records.\r\n   *\r\n   * #### Complexity\r\n   * `O(log32 n)`\r\n   */\r\n  iter(): IIterator<Record<S>> {\r\n    return this._records.iter();\r\n  }\r\n\r\n  /**\r\n   * Test whether the table has a particular record.\r\n   *\r\n   * @param id - The id of the record of interest.\r\n   *\r\n   * @returns `true` if the table has the record, `false` otherwise.\r\n   *\r\n   * #### Complexity\r\n   * `O(log32 n)`\r\n   */\r\n  has(id: string): boolean {\r\n    return this._records.has(id, Private.recordIdCmp);\r\n  }\r\n\r\n  /**\r\n   * Get the record for a particular id in the table.\r\n   *\r\n   * @param id - The id of the record of interest.\r\n   *\r\n   * @returns The record for the specified id, or `undefined` if no\r\n   *   such record exists.\r\n   *\r\n   * #### Complexity\r\n   * `O(log32 n)`\r\n   */\r\n  get(id: string): Record<S> | undefined {\r\n    return this._records.get(id, Private.recordIdCmp);\r\n  }\r\n\r\n  /**\r\n   * Update one or more records in the table.\r\n   *\r\n   * @param data - The data for updating the records.\r\n   *\r\n   * #### Notes\r\n   * If a specified record does not exist, it will be created.\r\n   *\r\n   * This method may only be called during a datastore transaction.\r\n   */\r\n  update(data: Table.Update<S>): void {\r\n    // Fetch the context.\r\n    let context = this._context;\r\n\r\n    // Ensure the update happens during a transaction.\r\n    if (!context.inTransaction) {\r\n      throw new Error('A table can only be updated during a transaction.');\r\n    }\r\n\r\n    // Fetch common variables.\r\n    let schema = this.schema;\r\n    let records = this._records;\r\n    let cmp = Private.recordIdCmp;\r\n\r\n    // Iterate over the data.\r\n    for (let id in data) {\r\n      // Get or create the old record.\r\n      let old = records.get(id, cmp) || Private.createRecord(schema, id);\r\n\r\n      // Apply the update and create the new record.\r\n      let record = Private.applyUpdate(schema, old, data[id], context);\r\n\r\n      // Replace the old record in the table.\r\n      records.insert(record);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct a new datastore table.\r\n   *\r\n   * @param schema - The schema for the table.\r\n   *\r\n   * @param context - The datastore context.\r\n   */\r\n  private constructor(schema: S, context: Datastore.Context, records?: IterableOrArrayLike<Record<S>>) {\r\n    this.schema = schema;\r\n    this._context = context;\r\n    if (records) {\r\n      this._records.assign(records);\r\n    }\r\n  }\r\n\r\n  private _context: Datastore.Context;\r\n  private _records = new BPlusTree<Record<S>>(Private.recordCmp);\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `Table` class statics.\r\n */\r\nexport\r\nnamespace Table {\r\n  /**\r\n   * A type alias for the table update type.\r\n   */\r\n  export\r\n  type Update<S extends Schema> = {\r\n    readonly [recordId: string]: Record.Update<S>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the table change type.\r\n   */\r\n  export\r\n  type Change<S extends Schema> = {\r\n    readonly [recordId: string]: Record.Change<S>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the table patch type.\r\n   */\r\n  export\r\n  type Patch<S extends Schema> = {\r\n    readonly [recordId: string]: Record.Patch<S>;\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * A type alias for the table mutable change type.\r\n   */\r\n  export\r\n  type MutableChange<S extends Schema> = {\r\n    [recordId: string]: Record.MutableChange<S>;\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * A type alias for the table mutable patch type.\r\n   */\r\n  export\r\n  type MutablePatch<S extends Schema> = {\r\n    [recordId: string]: Record.MutablePatch<S>;\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * A three-way record comparison function.\r\n   */\r\n  export\r\n  function recordCmp<S extends Schema>(a: Record<S>, b: Record<S>): number {\r\n    return StringExt.cmp(a.$id, b.$id);\r\n  }\r\n\r\n  /**\r\n   * A three-way record id comparison function.\r\n   */\r\n  export\r\n  function recordIdCmp<S extends Schema>(record: Record<S>, id: string): number {\r\n    return StringExt.cmp(record.$id, id);\r\n  }\r\n\r\n  /**\r\n   * Create a new record object.\r\n   *\r\n   * @param schema - The schema for the record.\r\n   *\r\n   * @param id - The unique id for the record.\r\n   *\r\n   * @returns A new default initialized record.\r\n   */\r\n  export\r\n  function createRecord<S extends Schema>(schema: S, id: string): Record<S> {\r\n    // Create the record and metadata objects.\r\n    let record: any = {};\r\n    let metadata: any = {};\r\n\r\n    // Set the base record state.\r\n    record.$id = id;\r\n    record['@@metadata'] = metadata;\r\n\r\n    // Populate the record and metadata.\r\n    for (let name in schema.fields) {\r\n      let field = schema.fields[name];\r\n      record[name] = field.createValue();\r\n      metadata[name] = field.createMetadata();\r\n    }\r\n\r\n    // Return the new record.\r\n    return record;\r\n  }\r\n\r\n  /**\r\n   * Apply an update to a record.\r\n   *\r\n   * @param schema - The schema for the record.\r\n   *\r\n   * @param record - The record of interest.\r\n   *\r\n   * @param update - The update to apply to the record.\r\n   *\r\n   * @param context - The datastore context.\r\n   *\r\n   * @returns A new record with the update applied.\r\n   */\r\n  export\r\n  function applyUpdate<S extends Schema>(schema: S, record: Record<S>, update: Record.Update<S>, context: Datastore.Context): Record<S> {\r\n    // Fetch the version and store id.\r\n    let version = context.version;\r\n    let storeId = context.storeId;\r\n\r\n    // Fetch or create the table change and patch.\r\n    let tc = context.change[schema.id] || (context.change[schema.id] = {});\r\n    let tp = context.patch[schema.id] || (context.patch[schema.id] = {});\r\n\r\n    // Fetch or create the record change and patch.\r\n    let rc = tc[record.$id] || (tc[record.$id] = {});\r\n    let rp = tp[record.$id] || (tp[record.$id] = {});\r\n\r\n    // Cast the record to a value object.\r\n    let previous = record as Record.Value<S>;\r\n\r\n    // Fetch the record metadata.\r\n    let metadata = record['@@metadata'];\r\n\r\n    // Create a clone of the record.\r\n    let clone = { ...(record as any) };\r\n\r\n    // Iterate over the update.\r\n    for (let name in update) {\r\n      // Fetch the relevant field.\r\n      let field = schema.fields[name];\r\n\r\n      // Apply the update for the field.\r\n      let { value, change, patch } = field.applyUpdate({\r\n        previous: previous[name],\r\n        update: update[name]!,\r\n        metadata: metadata[name],\r\n        version,\r\n        storeId\r\n      });\r\n\r\n      // Assign the new value to the clone.\r\n      clone[name] = value;\r\n\r\n      // Merge the change if needed.\r\n      if (name in rc) {\r\n        change = field.mergeChange(rc[name]!, change);\r\n      }\r\n\r\n      // Merge the patch if needed.\r\n      if (name in rp) {\r\n        patch = field.mergePatch(rp[name]!, patch);\r\n      }\r\n\r\n      // Update the record change and patch for the field.\r\n      rc[name] = change;\r\n      rp[name] = patch;\r\n    }\r\n\r\n    // Return the new record.\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * A type alias for the result of a patch operation.\r\n   */\r\n  export\r\n  type PatchResult<S extends Schema> = {\r\n    /**\r\n     * The new record object.\r\n     */\r\n    readonly record: Record<S>;\r\n\r\n    /**\r\n     * The user-facing change object.\r\n     */\r\n    readonly change: Record.Change<S>;\r\n  };\r\n\r\n  /**\r\n   * Apply a patch to a record.\r\n   *\r\n   * @param schema - The schema for the record.\r\n   *\r\n   * @param record - The record of interest.\r\n   *\r\n   * @param patch - The patch to apply to the record.\r\n   *\r\n   * @return The result of applying the patch.\r\n   */\r\n  export\r\n  function applyPatch<S extends Schema>(schema: S, record: Record<S>, patch: Record.Patch<S>): PatchResult<S> {\r\n    // Create the change object.\r\n    let rc: Record.MutableChange<S> = {};\r\n\r\n    // Cast the record to a value object.\r\n    let previous = record as Record.Value<S>;\r\n\r\n    // Fetch the record metadata.\r\n    let metadata = record['@@metadata'];\r\n\r\n    // Create a clone of the record.\r\n    let clone = { ...(record as any) };\r\n\r\n    // Iterate over the patch.\r\n    for (let name in patch) {\r\n      // Fetch the relevant field.\r\n      let field = schema.fields[name];\r\n\r\n      // Apply the patch for the field.\r\n      let { value, change } = field.applyPatch({\r\n        previous: previous[name],\r\n        patch: patch[name]!,\r\n        metadata: metadata[name]\r\n      });\r\n\r\n      // Assign the new value to the clone.\r\n      clone[name] = value;\r\n\r\n      // Update the change object.\r\n      rc[name] = change;\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { record: clone, change: rc };\r\n  }\r\n\r\n  /**\r\n   * Unapply a patch to a record.\r\n   *\r\n   * @param schema - The schema for the record.\r\n   *\r\n   * @param record - The record of interest.\r\n   *\r\n   * @param patch - The patch to unapply to the record.\r\n   *\r\n   * @return The result of unapplying the patch.\r\n   */\r\n  export\r\n  function unapplyPatch<S extends Schema>(schema: S, record: Record<S>, patch: Record.Patch<S>): PatchResult<S> {\r\n    // Create the change object.\r\n    let rc: Record.MutableChange<S> = {};\r\n\r\n    // Cast the record to a value object.\r\n    let previous = record as Record.Value<S>;\r\n\r\n    // Fetch the record metadata.\r\n    let metadata = record['@@metadata'];\r\n\r\n    // Create a clone of the record.\r\n    let clone = { ...(record as any) };\r\n\r\n    // Iterate over the patch.\r\n    for (let name in patch) {\r\n      // Fetch the relevant field.\r\n      let field = schema.fields[name];\r\n\r\n      // Apply the patch for the field.\r\n      let { value, change } = field.unapplyPatch({\r\n        previous: previous[name],\r\n        patch: patch[name]!,\r\n        metadata: metadata[name]\r\n      });\r\n\r\n      // Assign the new value to the clone.\r\n      clone[name] = value;\r\n\r\n      // Update the change object.\r\n      rc[name] = change;\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { record: clone, change: rc };\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * Create a duplex string identifier.\r\n *\r\n * @param version - The datastore version for the duplex id.\r\n *\r\n * @param store - The datastore id for the duplex id.\r\n *\r\n * @returns A string duplex id for the given arguments.\r\n *\r\n * #### Notes\r\n * ID format: <6-byte version><4-byte storeId>\r\n */\r\nexport\r\nfunction createDuplexId(version: number, store: number): string {\r\n  // Split the version into 16-bit values.\r\n  let vc = version & 0xFFFF;\r\n  let vb = (((version - vc) / 0x10000) | 0) & 0xFFFF;\r\n  let va = (((version - vb - vc) / 0x100000000) | 0) & 0xFFFF;\r\n\r\n  // Split the store id into 16-bit values.\r\n  let sb = store & 0xFFFF;\r\n  let sa = (((store - sb) / 0x10000) | 0) & 0xFFFF;\r\n\r\n  // Convert the parts into a string identifier duplex.\r\n  return String.fromCharCode(va, vb, vc, sa, sb);\r\n}\r\n\r\n\r\n/**\r\n * Create a triplex string identifier between two boundaries.\r\n *\r\n * @param version - The datastore version for the triplex id.\r\n *\r\n * @param store - The datastore id for the triplex id.\r\n *\r\n * @param lower - The lower triplex boundary identifier or `''`\r\n *   to represent the lowest-most boundary.\r\n *\r\n * @param upper - The upper triplex boundary identifier or `''`\r\n *   to represent the upper-most boundary.\r\n *\r\n * @returns A new triplex identifier between the two boundaries.\r\n *\r\n * #### Notes\r\n * ID format: <6-byte path><6-byte version><4-byte storeId> * (N >= 1)\r\n */\r\nexport\r\nfunction createTriplexId(version: number, store: number, lower: string, upper: string): string {\r\n  // The maximum path in a triplex id.\r\n  const MAX_PATH = 0xFFFFFFFFFFFF;\r\n\r\n  // Set up the variable to hold the id.\r\n  let id = '';\r\n\r\n  // Fetch the triplet counts of the ids.\r\n  let lowerCount = lower ? Private.idTripletCount(lower) : 0;\r\n  let upperCount = upper ? Private.idTripletCount(upper) : 0;\r\n\r\n  // Iterate over the id triplets.\r\n  for (let i = 0, n = Math.max(lowerCount, upperCount); i < n; ++i) {\r\n    // Fetch the lower identifier triplet, padding as needed.\r\n    let lp: number;\r\n    let lc: number;\r\n    let ls: number;\r\n    if (i >= lowerCount) {\r\n      lp = 0;\r\n      lc = 0;\r\n      ls = 0;\r\n    } else {\r\n      lp = Private.idPathAt(lower, i);\r\n      lc = Private.idVersionAt(lower, i);\r\n      ls = Private.idStoreAt(lower, i);\r\n    }\r\n\r\n    // Fetch the upper identifier triplet, padding as needed.\r\n    let up: number;\r\n    let uc: number;\r\n    let us: number;\r\n    if (i >= upperCount) {\r\n      up = upperCount === 0 ? MAX_PATH + 1 : 0;\r\n      uc = 0;\r\n      us = 0;\r\n    } else {\r\n      up = Private.idPathAt(upper, i);\r\n      uc = Private.idVersionAt(upper, i);\r\n      us = Private.idStoreAt(upper, i);\r\n    }\r\n\r\n    // If the triplets are the same, copy the triplet and continue.\r\n    if (lp === up && lc === uc && ls === us) {\r\n      id += Private.createTriplet(lp, lc, ls);\r\n      continue;\r\n    }\r\n\r\n    // If the triplets are different, the well-ordered identifiers\r\n    // assumption means that the lower triplet compares less than\r\n    // the upper triplet. The task now is to find the nearest free\r\n    // path slot among the remaining triplets.\r\n\r\n    // If there is free space between the path portions of the\r\n    // triplets, select a new path which falls between them.\r\n    if (up - lp > 1) {\r\n      let np = Private.randomPath(lp + 1, up - 1);\r\n      id += Private.createTriplet(np, version, store);\r\n      return id.slice();\r\n    }\r\n\r\n    // Otherwise, copy the left triplet and reset the upper count\r\n    // to zero so that the loop chooses the nearest available path\r\n    // slot after the current lower triplet.\r\n    id += Private.createTriplet(lp, lc, ls);\r\n    upperCount = 0;\r\n  }\r\n\r\n  // If this point is reached, the lower and upper identifiers share\r\n  // the same path but diverge based on the version or store id. It is\r\n  // safe to insert anywhere in an extra triplet.\r\n  let np = Private.randomPath(1, MAX_PATH);\r\n  id += Private.createTriplet(np, version, store);\r\n  return id.slice();\r\n}\r\n\r\n\r\n/**\r\n * Create the multiple triplex identifiers.\r\n *\r\n * @param n - The number of identifiers to create.\r\n *\r\n * @param version - The datastore version.\r\n *\r\n * @param store - The datastore id.\r\n *\r\n * @param lower - The lower boundary identifier, exclusive.\r\n *\r\n * @param uppper - The upper boundary identifier, exclusive.\r\n *\r\n * @returns The requested identifiers.\r\n */\r\nexport\r\nfunction createTriplexIds(n: number, version: number, store: number, lower: string, upper: string): string[] {\r\n  // Initialize the identifiers array.\r\n  let ids: string[] = [];\r\n\r\n  // Loop the required number of times.\r\n  while (ids.length < n) {\r\n    // Create an identifier between the boundaries.\r\n    let id = createTriplexId(version, store, lower, upper);\r\n\r\n    // Add the identifier to the array.\r\n    ids.push(id);\r\n\r\n    // Update the lower boundary identifier.\r\n    lower = id;\r\n  }\r\n\r\n  // Return the generated identifiers.\r\n  return ids;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * Create a string identifier triplet.\r\n   *\r\n   * @param path - The path value for the triplet.\r\n   *\r\n   * @param version - The version for the triplet.\r\n   *\r\n   * @param store - The store id for the triplet.\r\n   *\r\n   * @returns The string identifier triplet.\r\n   */\r\n  export\r\n  function createTriplet(path: number, version: number, store: number): string {\r\n    // Split the path into 16-bit values.\r\n    let pc = path & 0xFFFF;\r\n    let pb = (((path - pc) / 0x10000) | 0) & 0xFFFF;\r\n    let pa = (((path - pb - pc) / 0x100000000) | 0) & 0xFFFF;\r\n\r\n    // Split the version into 16-bit values.\r\n    let vc = version & 0xFFFF;\r\n    let vb = (((version - vc) / 0x10000) | 0) & 0xFFFF;\r\n    let va = (((version - vb - vc) / 0x100000000) | 0) & 0xFFFF;\r\n\r\n    // Split the store id into 16-bit values.\r\n    let sb = store & 0xFFFF;\r\n    let sa = (((store - sb) / 0x10000) | 0) & 0xFFFF;\r\n\r\n    // Convert the parts into a string identifier triplet.\r\n    return String.fromCharCode(pa, pb, pc, va, vb, vc, sa, sb);\r\n  }\r\n\r\n  /**\r\n   * Get the total number of path triplets in an identifier.\r\n   *\r\n   * @param id - The identifier of interest.\r\n   *\r\n   * @returns The total number of triplets in the id.\r\n   */\r\n  export\r\n  function idTripletCount(id: string): number {\r\n    return id.length >> 3;\r\n  }\r\n\r\n  /**\r\n   * Get the path value for a particular triplet.\r\n   *\r\n   * @param id - The string id of interest.\r\n   *\r\n   * @param i - The index of the triplet.\r\n   *\r\n   * @returns The path value for the specified triplet.\r\n   */\r\n  export\r\n  function idPathAt(id: string, i: number): number {\r\n    let j = i << 3;\r\n    let a = id.charCodeAt(j + 0);\r\n    let b = id.charCodeAt(j + 1);\r\n    let c = id.charCodeAt(j + 2);\r\n    return a * 0x100000000 + b * 0x10000 + c;\r\n  }\r\n\r\n  /**\r\n   * Get the version for a particular triplet.\r\n   *\r\n   * @param id - The identifier of interest.\r\n   *\r\n   * @param i - The index of the triplet.\r\n   *\r\n   * @returns The version for the specified triplet.\r\n   */\r\n  export\r\n  function idVersionAt(id: string, i: number): number {\r\n    let j = i << 3;\r\n    let a = id.charCodeAt(j + 3);\r\n    let b = id.charCodeAt(j + 4);\r\n    let c = id.charCodeAt(j + 5);\r\n    return a * 0x100000000 + b * 0x10000 + c;\r\n  }\r\n\r\n  /**\r\n   * Get the store id for a particular triplet.\r\n   *\r\n   * @param id - The identifier of interest.\r\n   *\r\n   * @param i - The index of the triplet.\r\n   *\r\n   * @returns The store id for the specified triplet.\r\n   */\r\n  export\r\n  function idStoreAt(id: string, i: number): number {\r\n    let j = i << 3;\r\n    let a = id.charCodeAt(j + 6);\r\n    let b = id.charCodeAt(j + 7);\r\n    return a * 0x10000 + b;\r\n  }\r\n\r\n  /**\r\n   * Pick a path in the leading bucket of an inclusive range.\r\n   *\r\n   * @param min - The minimum allowed path, inclusive.\r\n   *\r\n   * @param max - The maximum allowed path, inclusive.\r\n   *\r\n   * @returns A random path in the leading bucket of the range.\r\n   */\r\n  export\r\n  function randomPath(min: number, max: number): number {\r\n    return min + Math.round(Math.random() * Math.sqrt(max - min));\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2019, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  each, IIterable, IIterator, iterItems, map, StringExt, toArray, toObject\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  BPlusTree, LinkedList\r\n} from '@lumino/collections';\r\n\r\nimport {\r\n  DisposableDelegate, IDisposable\r\n} from '@lumino/disposable';\r\n\r\nimport {\r\n  IMessageHandler, Message, MessageLoop, ConflatableMessage\r\n} from '@lumino/messaging';\r\n\r\nimport {\r\n  ISignal, Signal\r\n} from '@lumino/signaling';\r\n\r\nimport {\r\n  Record\r\n} from './record';\r\n\r\nimport {\r\n  Schema, validateSchema\r\n} from './schema';\r\n\r\nimport {\r\n  IServerAdapter\r\n} from './serveradapter';\r\n\r\nimport {\r\n  Table\r\n} from './table';\r\n\r\nimport {\r\n  createDuplexId\r\n} from './utilities';\r\n\r\n\r\n/**\r\n * A multi-user collaborative datastore.\r\n *\r\n * #### Notes\r\n * A store is structured in a maximally flat way using a hierarchy\r\n * of tables, records, and fields. Internally, the object graph is\r\n * synchronized among all users via CRDT algorithms.\r\n *\r\n * https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type\r\n * https://hal.inria.fr/file/index/docid/555588/filename/techreport.pdf\r\n */\r\nexport\r\nclass Datastore implements IDisposable, IIterable<Table<Schema>>, IMessageHandler {\r\n\r\n  /**\r\n   * Create a new datastore.\r\n   *\r\n   * @param options - The options for creating the datastore\r\n   *\r\n   * @returns A new datastore table.\r\n   *\r\n   * @throws An exception if any of the schema definitions are invalid.\r\n   */\r\n  static create(options: Datastore.IOptions): Datastore {\r\n    let {schemas} = options;\r\n    // Throws an error for invalid schemas:\r\n    Private.validateSchemas(schemas);\r\n\r\n    let context =  {\r\n      inTransaction: false,\r\n      transactionId: '',\r\n      version: 0,\r\n      storeId: options.id,\r\n      change: {},\r\n      patch: {},\r\n    };\r\n\r\n    let tables = new BPlusTree<Table<Schema>>(Private.recordCmp);\r\n    if (options.restoreState) {\r\n      // If passed state to restore, pass the intital state to recreate each\r\n      // table\r\n      let state = JSON.parse(options.restoreState);\r\n      tables.assign(map(schemas, s => {\r\n        return Table.recreate(s, context, state[s.id] || []);\r\n      }));\r\n    } else {\r\n      // Otherwise, simply create a new, empty table\r\n      tables.assign(map(schemas, s => {\r\n        return Table.create(s, context);\r\n      }));\r\n    }\r\n\r\n    return new Datastore(context, tables, options.adapter);\r\n  }\r\n\r\n  /**\r\n   * Dispose of the resources held by the datastore.\r\n   */\r\n  dispose(): void {\r\n    // Bail if already disposed.\r\n    if (this._disposed) {\r\n      return;\r\n    }\r\n    this._disposed = true;\r\n    Signal.clearData(this);\r\n\r\n    this._adapter = null;\r\n  }\r\n\r\n  /**\r\n   * Whether the datastore has been disposed.\r\n   */\r\n  get isDisposed(): boolean {\r\n    return this._disposed;\r\n  }\r\n\r\n  /**\r\n   * A signal emitted when changes are made to the store.\r\n   *\r\n   * #### Notes\r\n   * This signal is emitted either at the end of a local mutation,\r\n   * or after a remote mutation has been applied. The storeId can\r\n   * be used to determine its source.\r\n   *\r\n   * The payload represents the set of local changes that were made\r\n   * to bring the store to its current state.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get changed(): ISignal<Datastore, Datastore.IChangedArgs> {\r\n    return this._changed;\r\n  }\r\n\r\n  /**\r\n   * The unique id of the store.\r\n   *\r\n   * #### Notes\r\n   * The id is unique among all other collaborating peers.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get id(): number {\r\n    return this._context.storeId;\r\n  }\r\n\r\n  /**\r\n   * Whether a transaction is currently in progress.\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get inTransaction(): boolean {\r\n    return this._context.inTransaction;\r\n  }\r\n\r\n  /**\r\n   * The current version of the datastore.\r\n   *\r\n   * #### Notes\r\n   * This version is automatically increased for each transaction\r\n   * to the store. However, it might not increase linearly (i.e.\r\n   * it might make jumps).\r\n   *\r\n   * #### Complexity\r\n   * `O(1)`\r\n   */\r\n  get version(): number {\r\n    return this._context.version;\r\n  }\r\n\r\n  /**\r\n   * Create an iterator over all the tables of the datastore.\r\n   *\r\n   * @returns An iterator.\r\n   */\r\n  iter(): IIterator<Table<Schema>> {\r\n    return this._tables.iter();\r\n  }\r\n\r\n  /**\r\n   * Get the table for a particular schema.\r\n   *\r\n   * @param schema - The schema of interest.\r\n   *\r\n   * @returns The table for the specified schema.\r\n   *\r\n   * @throws An exception if no table exists for the given schema.\r\n   *\r\n   * #### Complexity\r\n   * `O(log32 n)`\r\n   */\r\n  get<S extends Schema>(schema: S): Table<S> {\r\n    let t = this._tables.get(schema.id, Private.recordIdCmp);\r\n    if (t === undefined) {\r\n      throw new Error(`No table found for schema with id: ${schema.id}`);\r\n    }\r\n    return t as Table<S>;\r\n  }\r\n\r\n  /**\r\n   * Begin a new transaction in the store.\r\n   *\r\n   * @returns The id of the new transaction\r\n   *\r\n   * @throws An exception if a transaction is already in progress.\r\n   *\r\n   * #### Notes\r\n   * This will allow the state of the store to be mutated\r\n   * thorugh the `update` method on the individual tables.\r\n   *\r\n   * After the updates are completed, `endTransaction` should\r\n   * be called.\r\n   */\r\n  beginTransaction(): string {\r\n    let newVersion = this._context.version + 1;\r\n    let id = this._transactionIdFactory(newVersion, this.id);\r\n    this._initTransaction(id, newVersion);\r\n    MessageLoop.postMessage(this, new ConflatableMessage('transaction-begun'));\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Completes a transaction.\r\n   *\r\n   * #### Notes\r\n   * This completes a transaction previously started with\r\n   * `beginTransaction`. If a change has occurred, the\r\n   * `changed` signal will be emitted.\r\n   */\r\n  endTransaction(): void {\r\n    this._finalizeTransaction();\r\n    let {patch, change, storeId, transactionId, version} = this._context;\r\n    // Possibly broadcast the transaction to collaborators.\r\n    if (this._adapter && !Private.isPatchEmpty(patch)) {\r\n      this._adapter.broadcast({\r\n        id: transactionId,\r\n        storeId,\r\n        patch,\r\n        version\r\n      });\r\n    }\r\n    // Add the transation to the cemetery to indicate it is visible.\r\n    this._cemetery[transactionId] = 1;\r\n    // Emit a change signal\r\n    if (!Private.isChangeEmpty(this._context.change)) {\r\n      this._changed.emit({\r\n        storeId,\r\n        transactionId,\r\n        type: 'transaction',\r\n        change,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a message.\r\n   */\r\n  processMessage(msg: Message): void {\r\n    switch(msg.type) {\r\n      case 'transaction-begun':\r\n        if (this._context.inTransaction) {\r\n          console.warn(\r\n            `Automatically ending transaction (did you forget to end it?): ${\r\n              this._context.transactionId\r\n            }`\r\n          );\r\n          this.endTransaction();\r\n        }\r\n        break;\r\n      case 'queued-transaction':\r\n        this._processQueue();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Undo a patch that was previously applied.\r\n   *\r\n   * @param transactionId - The transaction to undo.\r\n   *\r\n   * @returns A promise which resolves when the action is complete.\r\n   *\r\n   * @throws An exception if `undo` is called during a mutation, or if no\r\n   *   server adapter has been set for the datastore.\r\n   *\r\n   * #### Notes\r\n   * If changes are made, the `changed` signal will be emitted before\r\n   * the promise resolves.\r\n   */\r\n  undo(transactionId: string): Promise<void> {\r\n    if (!this._adapter) {\r\n      throw Error('No server adapter has been set for the datastore');\r\n    }\r\n    if (this.inTransaction) {\r\n      throw Error('Cannot undo during a transaction');\r\n    }\r\n    return this._adapter.undo(transactionId);\r\n  }\r\n\r\n  /**\r\n   * Redo a patch that was previously undone.\r\n   *\r\n   * @param transactionId - The transaction to redo.\r\n   *\r\n   * @returns A promise which resolves when the action is complete.\r\n   *\r\n   * @throws An exception if `redo` is called during a mutation, or if no\r\n   *   server adapter has been set for the datastore.\r\n   *\r\n   * #### Notes\r\n   * If changes are made, the `changed` signal will be emitted before\r\n   * the promise resolves.\r\n   */\r\n  redo(transactionId: string): Promise<void> {\r\n    if (!this._adapter) {\r\n      throw Error('No server adapter has been set for the datastore');\r\n    }\r\n    if (this.inTransaction) {\r\n      throw Error('Cannot redo during a transaction');\r\n    }\r\n    return this._adapter.redo(transactionId);\r\n  }\r\n\r\n  /**\r\n   * The handler for broadcasting transactions to peers.\r\n   */\r\n  get adapter(): IServerAdapter | null {\r\n    return this._adapter;\r\n  }\r\n\r\n  /**\r\n   * Serialize the state of the datastore to a string.\r\n   *\r\n   * @returns The serialized state.\r\n   */\r\n  toString(): string {\r\n    return JSON.stringify(toObject(\r\n      map(this, (table): [string, Record<Schema>[]] => {\r\n        return [table.schema.id, toArray(table)];\r\n      })\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Create a new datastore.\r\n   *\r\n   * @param id - The unique id of the datastore.\r\n   * @param tables - The tables of the datastore.\r\n   */\r\n  private constructor(\r\n    context: Datastore.Context,\r\n    tables: BPlusTree<Table<Schema>>,\r\n    adapter?: IServerAdapter,\r\n    transactionIdFactory?: Datastore.TransactionIdFactory\r\n  ) {\r\n    this._context = context;\r\n    this._tables = tables;\r\n    this._adapter = adapter || null;\r\n    this._transactionIdFactory = transactionIdFactory || createDuplexId;\r\n    if (this._adapter) {\r\n      this._adapter.onRemoteTransaction = this._onRemoteTransaction.bind(this);\r\n      this._adapter.onUndo = this._onUndo.bind(this);\r\n      this._adapter.onRedo = this._onRedo.bind(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a transaction from the server adapter.\r\n   */\r\n  private _onRemoteTransaction(transaction: Datastore.Transaction): void {\r\n    this._processTransaction(transaction, 'transaction');\r\n  }\r\n\r\n  /**\r\n   * Handle an undo from the server adapter.\r\n   */\r\n  private _onUndo(transaction: Datastore.Transaction): void {\r\n    this._processTransaction(transaction, 'undo');\r\n  }\r\n\r\n  /**\r\n   * Handle a redo from the server adapter.\r\n   */\r\n  private _onRedo(transaction: Datastore.Transaction): void {\r\n    this._processTransaction(transaction, 'redo');\r\n  }\r\n\r\n  /**\r\n   * Apply a transaction to the datastore.\r\n   *\r\n   * @param transactionApplication - The data of the transaction.\r\n   *\r\n   * @throws An exception if `processTransaction` is called during a mutation.\r\n   *\r\n   * #### Notes\r\n   * If changes are made, the `changed` signal will be emitted.\r\n   */\r\n  private _processTransaction(transaction: Datastore.Transaction, type: Datastore.TransactionType): void {\r\n    let {storeId, patch} = transaction;\r\n\r\n    try {\r\n      this._initTransaction(\r\n        transaction.id,\r\n        Math.max(this._context.version, transaction.version)\r\n      );\r\n    } catch (e) {\r\n      // Already in a transaction. Put the transaction in the queue to apply\r\n      // later.\r\n      this._queueTransaction(transaction, type);\r\n      return;\r\n    }\r\n    let change: Datastore.MutableChange = {};\r\n    try {\r\n      each(iterItems(patch), ([schemaId, tablePatch]) => {\r\n        let table = this._tables.get(schemaId, Private.recordIdCmp);\r\n        if (table === undefined) {\r\n          console.warn(\r\n            `Missing table for schema id '${\r\n              schemaId\r\n            }' in transaction '${transaction.id}'`);\r\n          this._finalizeTransaction();\r\n          return;\r\n        }\r\n        if ( type === 'transaction' || type === 'redo') {\r\n          let count = this._cemetery[transaction.id];\r\n          if (count === undefined) {\r\n            this._cemetery[transaction.id] = 1;\r\n            change[schemaId] = Table.patch(table, tablePatch);\r\n            return;\r\n          }\r\n          this._cemetery[transaction.id] = count + 1;\r\n          // If the transaction is just now positive, apply it to the store.\r\n          if (this._cemetery[transaction.id] === 1) {\r\n            change[schemaId] = Table.patch(table, tablePatch);\r\n            return;\r\n          }\r\n        } else {\r\n          let count = this._cemetery[transaction.id];\r\n          if (count === undefined) {\r\n            this._cemetery[transaction.id] = -1;\r\n            return;\r\n          }\r\n          this._cemetery[transaction.id] = count - 1;\r\n          // If the transaction hasn't already been unapplied, do so.\r\n          if (this._cemetery[transaction.id] === 0) {\r\n            change[schemaId] = Table.unpatch(table, tablePatch);\r\n          }\r\n        }\r\n      });\r\n    } finally {\r\n      this._finalizeTransaction();\r\n    }\r\n    if (!Private.isChangeEmpty(change)) {\r\n      this._changed.emit({\r\n        storeId,\r\n        transactionId: transaction.id,\r\n        type,\r\n        change,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queue a transaction for later application.\r\n   *\r\n   * @param transaction - the transaction to queue.\r\n   */\r\n  private _queueTransaction(transaction: Datastore.Transaction, type: Datastore.TransactionType): void {\r\n    this._transactionQueue.addLast([transaction, type]);\r\n    MessageLoop.postMessage(this, new ConflatableMessage('queued-transaction'));\r\n  }\r\n\r\n  /**\r\n   * Process all transactions currently queued.\r\n   */\r\n  private _processQueue(): void {\r\n    let queue = this._transactionQueue;\r\n    // If the transaction queue is empty, bail.\r\n    if (queue.isEmpty) {\r\n      return;\r\n    }\r\n\r\n    // Add a sentinel value to the end of the queue. The queue will\r\n    // only be processed up to the sentinel. Transactions added during\r\n    // this cycle will execute on the next cycle.\r\n    let sentinel = {};\r\n    queue.addLast(sentinel as any);\r\n\r\n    // Enter the processing loop.\r\n    while (true) {\r\n      // Remove the first transaction in the queue.\r\n      let [transaction, type] = queue.removeFirst()!;\r\n\r\n      // If the value is the sentinel, exit the loop.\r\n      if (transaction === sentinel) {\r\n        return;\r\n      }\r\n\r\n      // Apply the transaction.\r\n      this._processTransaction(transaction, type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the context state for a new transaction.\r\n   *\r\n   * @param id - The id of the new transaction.\r\n   * @param newVersion - The version of the datastore after the transaction.\r\n   *\r\n   * @throws An exception if a transaction is already in progress.\r\n   */\r\n  private _initTransaction(id: string, newVersion: number): void {\r\n    let context = this._context as Private.MutableContext;\r\n    if (context.inTransaction) {\r\n      throw new Error(`Already in a transaction: ${this._context.transactionId}`);\r\n    }\r\n    context.inTransaction = true;\r\n    context.change = {};\r\n    context.patch = {};\r\n    context.transactionId = id;\r\n    context.version = newVersion;\r\n  }\r\n\r\n  /**\r\n   * Finalize the context state for a transaction in progress.\r\n   *\r\n   * @throws An exception if no transaction is in progress.\r\n   */\r\n  private _finalizeTransaction(): void {\r\n    let context = this._context as Private.MutableContext;\r\n    if (!context.inTransaction) {\r\n      throw new Error('No transaction in progress.');\r\n    }\r\n    context.inTransaction = false;\r\n  }\r\n\r\n  private _adapter: IServerAdapter | null;\r\n  private _cemetery: { [id: string]: number } = {};\r\n  private _disposed = false;\r\n  private _tables: BPlusTree<Table<Schema>>;\r\n  private _context: Datastore.Context;\r\n  private _changed = new Signal<Datastore, Datastore.IChangedArgs>(this);\r\n  private _transactionIdFactory: Datastore.TransactionIdFactory;\r\n  private _transactionQueue = new LinkedList<[\r\n    Datastore.Transaction,\r\n    Datastore.TransactionType\r\n  ]>();\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `Datastore` class statics.\r\n */\r\nexport\r\nnamespace Datastore {\r\n  /**\r\n   * A type alias for kinds of transactions.\r\n   */\r\n  export type TransactionType = 'transaction' | 'undo' | 'redo';\r\n\r\n  /**\r\n   * An options object for initializing a datastore.\r\n   */\r\n  export\r\n  interface IOptions {\r\n    /**\r\n     * The unique id of the datastore.\r\n     */\r\n    id: number;\r\n\r\n    /**\r\n     * The table schemas of the datastore.\r\n     */\r\n    schemas: ReadonlyArray<Schema>;\r\n\r\n    /**\r\n     * An optional handler for broadcasting transactions to peers.\r\n     */\r\n    adapter?: IServerAdapter;\r\n\r\n    /**\r\n     * An optional transaction id factory to override the default.\r\n     */\r\n    transactionIdFactory?: TransactionIdFactory;\r\n\r\n    /**\r\n     * Initialize the state to a previously serialized one.\r\n     */\r\n    restoreState?: string;\r\n  }\r\n\r\n  /**\r\n   * The arguments object for the store `changed` signal.\r\n   */\r\n  export\r\n  interface IChangedArgs {\r\n    /**\r\n     * Whether the change was generated by transaction, undo, or redo.\r\n     */\r\n    readonly type: TransactionType;\r\n\r\n    /**\r\n     * The transaction id associated with the change.\r\n     */\r\n    readonly transactionId: string;\r\n\r\n    /**\r\n     * The id of the store responsible for the change.\r\n     */\r\n    readonly storeId: number;\r\n\r\n    /**\r\n     * A mapping of schema id to table change set.\r\n     */\r\n    readonly change: Change;\r\n  }\r\n\r\n  /**\r\n   * A type alias for a store change.\r\n   */\r\n  export\r\n  type Change = {\r\n    readonly [schemaId: string]: Table.Change<Schema>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for a store patch.\r\n   */\r\n  export\r\n  type Patch = {\r\n    readonly [schemaId: string]: Table.Patch<Schema>;\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  export\r\n  type MutableChange = {\r\n    [schemaId: string]: Table.MutableChange<Schema>;\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  export\r\n  type MutablePatch = {\r\n    [schemaId: string]: Table.MutablePatch<Schema>;\r\n  };\r\n\r\n  /**\r\n   * An object representing a datastore transaction.\r\n   */\r\n  export\r\n  type Transaction = {\r\n\r\n    /**\r\n     * The id of the transaction.\r\n     */\r\n    readonly id: string;\r\n\r\n    /**\r\n     * The id of the store responsible for the transaction.\r\n     */\r\n    readonly storeId: number;\r\n\r\n    /**\r\n     * The patch data of the transaction.\r\n     */\r\n    readonly patch: Patch;\r\n\r\n    /**\r\n     * The version of the source datastore.\r\n     */\r\n    readonly version: number;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  export\r\n  type Context = Readonly<Private.MutableContext>;\r\n\r\n  /**\r\n   * A factory function for generating a unique transaction id.\r\n   */\r\n  export\r\n  type TransactionIdFactory = (version: number, storeId: number) => string;\r\n\r\n  /**\r\n   * A helper function to wrap an update to the datastore in calls to\r\n   * `beginTransaction` and `endTransaction`.\r\n   *\r\n   * @param datastore: the datastore to which to apply the update.\r\n   *\r\n   * @param update: A function that performs the update on the datastore.\r\n   *   The function is called with a transaction id string, in case the\r\n   *   user wishes to store the transaction ID for later use.\r\n   *\r\n   * @returns the transaction ID.\r\n   *\r\n   * #### Notes\r\n   * If the datastore is already in a transaction, this does not attempt\r\n   * to start a new one, and returns an empty string for the transaction\r\n   * id. This allows for transactions to be composed a bit more easily.\r\n   */\r\n  export function withTransaction(\r\n    datastore: Datastore,\r\n    update: (id: string) => void\r\n  ): string {\r\n    let id = '';\r\n    if (!datastore.inTransaction) {\r\n      id = datastore.beginTransaction();\r\n    }\r\n    try {\r\n      update(id);\r\n    } finally {\r\n      if (id) {\r\n        datastore.endTransaction();\r\n      }\r\n    }\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * A base type for describing the location of data in a datastore,\r\n   * to be consumed by some object. The only requirement is that it\r\n   * has a datastore object. Objects extending from this will, in general,\r\n   * have some combination of table, record, and field locations.\r\n   */\r\n  export type DataLocation = {\r\n    /**\r\n     * The datastore in which the data is contained.\r\n     */\r\n    datastore: Datastore;\r\n  };\r\n\r\n  /**\r\n   * An interface for referring to a specific table in a datastore.\r\n   */\r\n  export type TableLocation<S extends Schema> = {\r\n    /**\r\n     * The schema in question. This schema must exist in the datastore,\r\n     * or an error may result in its usage.\r\n     */\r\n    schema: S;\r\n  };\r\n\r\n  /**\r\n   * An interface for referring to a specific record in a datastore.\r\n   */\r\n  export type RecordLocation<S extends Schema> = TableLocation<S> & {\r\n    /**\r\n     * The record in question.\r\n     */\r\n    record: string;\r\n  };\r\n\r\n  /**\r\n   * An interface for referring to a specific field in a datastore.\r\n   *\r\n   * #### Notes\r\n   * The field must exist in the schema.\r\n   */\r\n  export type FieldLocation<\r\n    S extends Schema,\r\n    F extends keyof S['fields']\r\n  > = RecordLocation<S> & {\r\n    /**\r\n     * The field in question.\r\n     */\r\n    field: F;\r\n  };\r\n\r\n  /**\r\n   * Get a given table by its location.\r\n   *\r\n   * @param datastore: the datastore in which the table resides.\r\n   *\r\n   * @param loc: The table location.\r\n   *\r\n   * @returns the table.\r\n   */\r\n  export function getTable<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: TableLocation<S>\r\n  ): Table<S> {\r\n    return datastore.get(loc.schema);\r\n  }\r\n\r\n  /**\r\n   * Get a given record by its location.\r\n   *\r\n   * @param datastore: the datastore in which the record resides.\r\n   *\r\n   * @param loc: The record location.\r\n   *\r\n   * @returns the record, or undefined if it does not exist.\r\n   */\r\n  export function getRecord<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: RecordLocation<S>\r\n  ): Record.Value<S> | undefined {\r\n    return datastore.get(loc.schema).get(loc.record);\r\n  }\r\n\r\n  /**\r\n   * Get a given field by its location.\r\n   *\r\n   * @param datastore: the datastore in which the field resides.\r\n   *\r\n   * @param loc: the field location.\r\n   *\r\n   * @returns the field in question.\r\n   *\r\n   * #### Notes\r\n   * This will throw an error if the record does not exist in the given table.\r\n   */\r\n  export function getField<S extends Schema, F extends keyof S['fields']>(\r\n    datastore: Datastore,\r\n    loc: FieldLocation<S, F>\r\n  ): S['fields'][F]['ValueType'] {\r\n    const record = datastore.get(loc.schema).get(loc.record);\r\n    if (!record) {\r\n      throw Error(`The record ${loc.record} could not be found`);\r\n    }\r\n    return record[loc.field];\r\n  }\r\n\r\n  /**\r\n   * Update a table.\r\n   *\r\n   * @param datastore: the datastore in which the table resides.\r\n   *\r\n   * @param loc: the table location.\r\n   *\r\n   * @param update: the update to the table.\r\n   *\r\n   * #### Notes\r\n   * This does not begin a transaction, so usage of this function should be\r\n   * combined with `beginTransaction`/`endTransaction`, or `withTransaction`.\r\n   */\r\n  export function updateTable<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: TableLocation<S>,\r\n    update: Table.Update<S>\r\n  ): void {\r\n    let table = datastore.get(loc.schema);\r\n    table.update(update);\r\n  }\r\n\r\n  /**\r\n   * Update a record in a table.\r\n   *\r\n   * @param datastore: the datastore in which the record resides.\r\n   *\r\n   * @param loc: the record location.\r\n   *\r\n   * @param update: the update to the record.\r\n   *\r\n   * #### Notes\r\n   * This does not begin a transaction, so usage of this function should be\r\n   * combined with `beginTransaction`/`endTransaction`, or `withTransaction`.\r\n   */\r\n  export function updateRecord<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: RecordLocation<S>,\r\n    update: Record.Update<S>\r\n  ): void {\r\n    let table = datastore.get(loc.schema);\r\n    table.update({\r\n      [loc.record]: update\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a field in a table.\r\n   *\r\n   * @param datastore: the datastore in which the field resides.\r\n   *\r\n   * @param loc: the field location.\r\n   *\r\n   * @param update: the update to the field.\r\n   *\r\n   * #### Notes\r\n   * This does not begin a transaction, so usage of this function should be\r\n   * combined with `beginTransaction`/`endTransaction`, or `withTransaction`.\r\n   */\r\n  export function updateField<S extends Schema, F extends keyof S['fields']>(\r\n    datastore: Datastore,\r\n    loc: FieldLocation<S, F>,\r\n    update: S['fields'][F]['UpdateType']\r\n  ): void {\r\n    let table = datastore.get(loc.schema);\r\n    // TODO: this cast may be made unnecessary once microsoft/TypeScript#13573\r\n    // is fixed, possibly by microsoft/TypeScript#26797 lands.\r\n    table.update({\r\n      [loc.record]: {\r\n        [loc.field]: update\r\n      } as Record.Update<S>\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listen to changes in a table. Changes to other tables are ignored.\r\n   *\r\n   * @param datastore: the datastore in which the table resides.\r\n   *\r\n   * @param loc: the table location.\r\n   *\r\n   * @param slot: a callback function to invoke when the table changes.\r\n   *\r\n   * @returns an `IDisposable` that can be disposed to remove the listener.\r\n   */\r\n  export function listenTable<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: TableLocation<S>,\r\n    slot: (source: Datastore, args: Table.Change<S>) => void,\r\n    thisArg?: any\r\n  ): IDisposable {\r\n    // A wrapper change signal connection function.\r\n    const wrapper = (source: Datastore, args: Datastore.IChangedArgs) => {\r\n      // Ignore changes that don't match the requested record.\r\n      if (!args.change[loc.schema.id]) {\r\n        return;\r\n      }\r\n      // Otherwise, call the slot.\r\n      const tc = args.change[loc.schema.id]! as Table.Change<S>;\r\n      slot.bind(thisArg)(source, tc);\r\n    };\r\n    datastore.changed.connect(wrapper);\r\n    return new DisposableDelegate(() => {\r\n      datastore.changed.disconnect(wrapper);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listen to changes in a record in a table. Changes to other tables and\r\n   * other records in the same table are ignored.\r\n   *\r\n   * @param datastore: the datastore in which the record resides.\r\n   *\r\n   * @param loc: the record location.\r\n   *\r\n   * @param slot: a callback function to invoke when the record changes.\r\n   *\r\n   * @returns an `IDisposable` that can be disposed to remove the listener.\r\n   */\r\n  export function listenRecord<S extends Schema>(\r\n    datastore: Datastore,\r\n    loc: RecordLocation<S>,\r\n    slot: (source: Datastore, args: Record.Change<S>) => void,\r\n    thisArg?: any\r\n  ): IDisposable {\r\n    // A wrapper change signal connection function.\r\n    const wrapper = (source: Datastore, args: Datastore.IChangedArgs) => {\r\n      // Ignore changes that don't match the requested record.\r\n      if (\r\n        !args.change[loc.schema.id] ||\r\n        !args.change[loc.schema.id][loc.record]\r\n      ) {\r\n        return;\r\n      }\r\n      // Otherwise, call the slot.\r\n      const tc = args.change[loc.schema.id]! as Table.Change<S>;\r\n      slot.bind(thisArg)(source, tc[loc.record]);\r\n    };\r\n    datastore.changed.connect(wrapper);\r\n    return new DisposableDelegate(() => {\r\n      datastore.changed.disconnect(wrapper);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listen to changes in a fields in a table. Changes to other tables, other\r\n   * records in the same table, and other fields in the same record are ignored.\r\n   *\r\n   * @param datastore: the datastore in which the field resides.\r\n   *\r\n   * @param loc: the field location.\r\n   *\r\n   * @param slot: a callback function to invoke when the field changes.\r\n   *\r\n   * @returns an `IDisposable` that can be disposed to remove the listener.\r\n   */\r\n  export function listenField<S extends Schema, F extends keyof S['fields']>(\r\n    datastore: Datastore,\r\n    loc: FieldLocation<S, F>,\r\n    slot: (source: Datastore, args: S['fields'][F]['ChangeType']) => void,\r\n    thisArg?: any\r\n  ): IDisposable {\r\n    const wrapper = (source: Datastore, args: Datastore.IChangedArgs) => {\r\n      // Ignore changes that don't match the requested field.\r\n      if (\r\n        !args.change[loc.schema.id] ||\r\n        !args.change[loc.schema.id][loc.record] ||\r\n        !args.change[loc.schema.id][loc.record][loc.field as string]\r\n      ) {\r\n        return;\r\n      }\r\n      // Otherwise, call the slot.\r\n      const tc = args.change[loc.schema.id]! as Table.Change<S>;\r\n      slot.bind(thisArg)(source, tc[loc.record][loc.field]);\r\n    };\r\n    datastore.changed.connect(wrapper);\r\n    return new DisposableDelegate(() => {\r\n      datastore.changed.disconnect(wrapper);\r\n    });\r\n  }\r\n}\r\n\r\n\r\nnamespace Private {\r\n  /**\r\n   * Validates all schemas, and throws an error if any are invalid.\r\n   */\r\n  export\r\n  function validateSchemas(schemas: ReadonlyArray<Schema>) {\r\n    let errors = [];\r\n    for (let s of schemas) {\r\n      let err = validateSchema(s);\r\n      if (err.length) {\r\n        errors.push(`Schema '${s.id}' validation failed: \\n${err.join('\\n')}`);\r\n      }\r\n    }\r\n    if (errors.length) {\r\n      throw new Error(errors.join('\\n\\n'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A three-way record comparison function.\r\n   */\r\n  export\r\n  function recordCmp<S extends Schema>(a: Table<S>, b: Table<S>): number {\r\n    return StringExt.cmp(a.schema.id, b.schema.id);\r\n  }\r\n\r\n  /**\r\n   * A three-way record id comparison function.\r\n   */\r\n  export\r\n  function recordIdCmp<S extends Schema>(table: Table<S>, id: string): number {\r\n    return StringExt.cmp(table.schema.id, id);\r\n  }\r\n\r\n  export\r\n  type MutableContext = {\r\n    /**\r\n     * Whether the datastore currently in a transaction.\r\n     */\r\n    inTransaction: boolean;\r\n\r\n    /**\r\n     * The id of the current transaction.\r\n     */\r\n    transactionId: string;\r\n\r\n    /**\r\n     * The current version of the datastore.\r\n     */\r\n    version: number;\r\n\r\n    /**\r\n     * The unique id of the datastore.\r\n     */\r\n    storeId: number;\r\n\r\n    /**\r\n     * The current change object of the transaction.\r\n     */\r\n    change: Datastore.MutableChange;\r\n\r\n    /**\r\n     * The current patch object of the transaction.\r\n     */\r\n    patch: Datastore.MutablePatch;\r\n  }\r\n\r\n  /**\r\n   * Checks if a patch is empty.\r\n   */\r\n  export\r\n  function isPatchEmpty(patch: Datastore.Patch): boolean {\r\n    return Object.keys(patch).length === 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if a change is empty.\r\n   */\r\n  export\r\n  function isChangeEmpty(change: Datastore.Change): boolean {\r\n    return Object.keys(change).length === 0;\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ReadonlyJSONValue\r\n} from '@lumino/coreutils';\r\n\r\n\r\n/**\r\n * An abstract base class for datastore field types.\r\n */\r\nexport\r\nabstract class Field<Value extends ReadonlyJSONValue, Update extends ReadonlyJSONValue, Metadata extends ReadonlyJSONValue, Change extends ReadonlyJSONValue, Patch extends ReadonlyJSONValue> {\r\n  /**\r\n   * Construct a new field.\r\n   *\r\n   * @param options - The options for initializing the field.\r\n   */\r\n  constructor(options: Field.IOptions = {}) {\r\n    let opts = { description: '', ...options };\r\n    this.description = opts.description;\r\n  }\r\n\r\n  /**\r\n   * The human-readable description of the field.\r\n   */\r\n  readonly description: string;\r\n\r\n  /**\r\n   * The value type for the field.\r\n   *\r\n   * #### Notes\r\n   * This type represents the user-facing value stored in the record.\r\n   */\r\n  readonly ValueType: Value;\r\n\r\n  /**\r\n   * The update type for the field.\r\n   *\r\n   * #### Notes\r\n   * This type represents the data the user passes to the `update`\r\n   * method of a table to update the field of a particular record.\r\n   */\r\n  readonly UpdateType: Update;\r\n\r\n  /**\r\n   * The metadata type for the field.\r\n   *\r\n   * #### Notes\r\n   * This type represents extra bookeeping data needed by the field\r\n   * to accurately apply updates and patches.\r\n   *\r\n   * This type extends the `ReadonlyJSONValue` type so that it may\r\n   * hold readonly JSON data. However, the metadata is intended to\r\n   * be mutated in-place and thus may also contain mutable data.\r\n   */\r\n  readonly MetadataType: Metadata;\r\n\r\n  /**\r\n   * The change type for the field.\r\n   *\r\n   * #### Notes\r\n   * This type represents the user-facing change to the field's value.\r\n   */\r\n  readonly ChangeType: Change;\r\n\r\n  /**\r\n   * The patch type for the field.\r\n   *\r\n   * #### Notes\r\n   * This type represents the system-facing patch to the field's value.\r\n   */\r\n  readonly PatchType: Patch;\r\n\r\n  /**\r\n   * The discriminated type name for the field.\r\n   */\r\n  abstract readonly type: string;\r\n\r\n  /**\r\n   * Create the initial value for the field.\r\n   *\r\n   * @returns The initial value for the field.\r\n   */\r\n  abstract createValue(): Value;\r\n\r\n  /**\r\n   * Create the metadata for the field.\r\n   *\r\n   * @returns The metadata for the field.\r\n   */\r\n  abstract createMetadata(): Metadata;\r\n\r\n  /**\r\n   * Apply a user update to the field.\r\n   *\r\n   * @param args - The arguments for the update.\r\n   *\r\n   * @returns The result of applying the update.\r\n   */\r\n  abstract applyUpdate(args: Field.UpdateArgs<Value, Update, Metadata>): Field.UpdateResult<Value, Change, Patch>;\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  abstract applyPatch(args: Field.PatchArgs<Value, Patch, Metadata>): Field.PatchResult<Value, Change>;\r\n\r\n  /**\r\n   * Unapply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of unapplying the patch.\r\n   */\r\n  abstract unapplyPatch(args: Field.PatchArgs<Value, Patch, Metadata>): Field.PatchResult<Value, Change>;\r\n\r\n  /**\r\n   * Merge two change objects into a single change object.\r\n   *\r\n   * @param first - The first change object of interest.\r\n   *\r\n   * @param second - The second change object of interest.\r\n   *\r\n   * @returns A new change object which represents both changes.\r\n   */\r\n  abstract mergeChange(first: Change, second: Change): Change;\r\n\r\n  /**\r\n   * Merge two patch objects into a single patch object.\r\n   *\r\n   * @param first - The first patch object of interest.\r\n   *\r\n   * @param second - The second patch object of interest.\r\n   *\r\n   * @returns A new patch object which represents both patches.\r\n   */\r\n  abstract mergePatch(first: Patch, second: Patch): Patch;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `Field` class statics.\r\n */\r\nexport\r\nnamespace Field {\r\n  /**\r\n   * An options object for initializing a field.\r\n   */\r\n  export\r\n  interface IOptions {\r\n    /**\r\n     * The human-readable description of the field.\r\n     *\r\n     * The default is `''`.\r\n     */\r\n    description?: string;\r\n  }\r\n\r\n  /**\r\n   * A type alias for the arguments to an update operation.\r\n   */\r\n  export\r\n  type UpdateArgs<Value, Update, Metadata> = {\r\n    /**\r\n     * The previous value of the field.\r\n     */\r\n    readonly previous: Value;\r\n\r\n    /**\r\n     * The user update for the field.\r\n     */\r\n    readonly update: Update;\r\n\r\n    /**\r\n     * The metadata for the field.\r\n     */\r\n    readonly metadata: Metadata;\r\n\r\n    /**\r\n     * The datastore version.\r\n     */\r\n    readonly version: number;\r\n\r\n    /**\r\n     * The datastore id.\r\n     */\r\n    readonly storeId: number;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the result of an update operation.\r\n   */\r\n  export\r\n  type UpdateResult<Value, Change, Patch> = {\r\n    /**\r\n     * The new value of the field.\r\n     */\r\n    readonly value: Value;\r\n\r\n    /**\r\n     * The user-facing change for the field.\r\n     */\r\n    readonly change: Change;\r\n\r\n    /**\r\n     * The system-facing patch for the field.\r\n     */\r\n    readonly patch: Patch;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the arguments to a patch operation.\r\n   */\r\n  export\r\n  type PatchArgs<Value, Patch, Metadata> = {\r\n    /**\r\n     * The previous value of the field.\r\n     */\r\n    readonly previous: Value;\r\n\r\n    /**\r\n     * The system patch for the field.\r\n     */\r\n    readonly patch: Patch;\r\n\r\n    /**\r\n     * The metadata for the field.\r\n     */\r\n    readonly metadata: Metadata;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the result of a patch operation.\r\n   */\r\n  export\r\n  type PatchResult<Value, Change> = {\r\n    /**\r\n     * The new value of the field.\r\n     */\r\n    readonly value: Value;\r\n\r\n    /**\r\n     * The user-facing change for the field.\r\n     */\r\n    readonly change: Change;\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * A type alias which is compatible with any field type.\r\n */\r\nexport\r\ntype AnyField = Field<ReadonlyJSONValue, ReadonlyJSONValue, ReadonlyJSONValue, ReadonlyJSONValue, ReadonlyJSONValue>;\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ArrayExt, StringExt\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  ReadonlyJSONValue\r\n} from '@lumino/coreutils';\r\n\r\nimport {\r\n  Field\r\n} from './field';\r\n\r\nimport {\r\n  createTriplexIds\r\n} from './utilities';\r\n\r\n\r\n/**\r\n * A field which represents a collaborative list of values.\r\n */\r\nexport\r\nclass ListField<T extends ReadonlyJSONValue> extends Field<ListField.Value<T>, ListField.Update<T>, ListField.Metadata<T>, ListField.Change<T>, ListField.Patch<T>> {\r\n  /**\r\n   * Construct a new list field.\r\n   *\r\n   * @param options - The options for initializing the field.\r\n   */\r\n  constructor(options: ListField.IOptions<T> = {}) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * The discriminated type of the field.\r\n   */\r\n  get type(): 'list' {\r\n    return 'list';\r\n  }\r\n\r\n  /**\r\n   * Create the initial value for the field.\r\n   *\r\n   * @returns The initial value for the field.\r\n   */\r\n  createValue(): ListField.Value<T> {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Create the metadata for the field.\r\n   *\r\n   * @returns The metadata for the field.\r\n   */\r\n  createMetadata(): ListField.Metadata<T> {\r\n    return { ids: [], cemetery: {} };\r\n  }\r\n\r\n  /**\r\n   * Apply a user update to the field.\r\n   *\r\n   * @param args - The arguments for the update.\r\n   *\r\n   * @returns The result of applying the update.\r\n   */\r\n  applyUpdate(args: Field.UpdateArgs<ListField.Value<T>, ListField.Update<T>, ListField.Metadata<T>>): Field.UpdateResult<ListField.Value<T>, ListField.Change<T>, ListField.Patch<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, update, metadata, version, storeId } = args;\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = [...previous];\r\n\r\n    // Set up the change and patch arrays.\r\n    let change: ListField.ChangePart<T>[] = [];\r\n    let patch: ListField.PatchPart<T>[] = [];\r\n\r\n    // Coerce the update into an array of splices.\r\n    if (Private.isSplice(update)) {\r\n      update = [update];\r\n    }\r\n\r\n    // Iterate over the update.\r\n    for (let splice of update) {\r\n      // Apply the splice to the clone.\r\n      let obj = Private.applySplice(clone, splice, metadata, version, storeId);\r\n\r\n      // Update the change array.\r\n      change.push(obj.change);\r\n\r\n      // Update the patch array.\r\n      patch.push(obj.patch);\r\n    }\r\n\r\n    // Return the update result.\r\n    return { value: clone, change, patch };\r\n  }\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  applyPatch(args: Field.PatchArgs<ListField.Value<T>, ListField.Patch<T>, ListField.Metadata<T>>): Field.PatchResult<ListField.Value<T>, ListField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = [...previous];\r\n\r\n    // Set up the change array.\r\n    let change: ListField.ChangePart<T>[] = [];\r\n\r\n    // Iterate over the patch.\r\n    for (let part of patch) {\r\n      // Apply the patch part to the value.\r\n      let result = Private.applyPatch(clone, part, metadata);\r\n\r\n      // Update the change array.\r\n      change.push(...result);\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { value: clone, change };\r\n  }\r\n\r\n  /**\r\n   * Unapply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of unapplying the patch.\r\n   */\r\n  unapplyPatch(args: Field.PatchArgs<ListField.Value<T>, ListField.Patch<T>, ListField.Metadata<T>>): Field.PatchResult<ListField.Value<T>, ListField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = [...previous];\r\n\r\n    // Set up the change array.\r\n    let change: ListField.ChangePart<T>[] = [];\r\n\r\n    // Iterate over the patch.\r\n    for (let part of patch) {\r\n      let reversed = {\r\n        removedIds: part.insertedIds,\r\n        insertedIds: part.removedIds,\r\n        removedValues: part.insertedValues,\r\n        insertedValues: part.removedValues\r\n      };\r\n      // Apply the patch part to the value.\r\n      let result = Private.applyPatch(clone, reversed, metadata);\r\n\r\n      // Update the change array.\r\n      change.push(...result);\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { value: clone, change };\r\n  }\r\n\r\n  /**\r\n   * Merge two change objects into a single change object.\r\n   *\r\n   * @param first - The first change object of interest.\r\n   *\r\n   * @param second - The second change object of interest.\r\n   *\r\n   * @returns A new change object which represents both changes.\r\n   */\r\n  mergeChange(first: ListField.Change<T>, second: ListField.Change<T>): ListField.Change<T> {\r\n    return [...first, ...second];\r\n  }\r\n\r\n  /**\r\n   * Merge two patch objects into a single patch object.\r\n   *\r\n   * @param first - The first patch object of interest.\r\n   *\r\n   * @param second - The second patch object of interest.\r\n   *\r\n   * @returns A new patch object which represents both patches.\r\n   */\r\n  mergePatch(first: ListField.Patch<T>, second: ListField.Patch<T>): ListField.Patch<T> {\r\n    return [...first, ...second];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `ListField` class statics.\r\n */\r\nexport\r\nnamespace ListField {\r\n  /**\r\n   * An options object for initializing a list field.\r\n   */\r\n  export\r\n  interface IOptions<T extends ReadonlyJSONValue> extends Field.IOptions { }\r\n\r\n  /**\r\n   * A type alias for the list field value type.\r\n   */\r\n  export\r\n  type Value<T extends ReadonlyJSONValue> = ReadonlyArray<T>;\r\n\r\n  /**\r\n   * A type alias for a list field splice.\r\n   */\r\n  export\r\n  type Splice<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The index of the splice.\r\n     */\r\n    readonly index: number;\r\n\r\n    /**\r\n     * The number of values to remove.\r\n     */\r\n    readonly remove: number;\r\n\r\n    /**\r\n     * The values to insert.\r\n     */\r\n    readonly values: ReadonlyArray<T>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the list field update type.\r\n   */\r\n  export\r\n  type Update<T extends ReadonlyJSONValue> = Splice<T> | ReadonlyArray<Splice<T>>;\r\n\r\n  /**\r\n   * A type alias for the list field metadata type.\r\n   */\r\n  export\r\n  type Metadata<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * An array of ids corresponding to the list elements.\r\n     */\r\n    readonly ids: Array<string>;\r\n\r\n    /**\r\n     * The cemetery for concurrently deleted elements.\r\n     */\r\n    readonly cemetery: { [id: string]: number };\r\n  };\r\n\r\n  /**\r\n   * A type alias for a list field change part.\r\n   */\r\n  export\r\n  type ChangePart<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The index of the modification.\r\n     */\r\n    readonly index: number;\r\n\r\n    /**\r\n     * The values that were removed.\r\n     */\r\n    readonly removed: ReadonlyArray<T>;\r\n\r\n    /**\r\n     * The values that were inserted.\r\n     */\r\n    readonly inserted: ReadonlyArray<T>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the list field change type.\r\n   */\r\n  export\r\n  type Change<T extends ReadonlyJSONValue> = ReadonlyArray<ChangePart<T>>;\r\n\r\n  /**\r\n   * A type alias for the list field patch part.\r\n   */\r\n  export\r\n  type PatchPart<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The ids that were removed.\r\n     */\r\n    readonly removedIds: ReadonlyArray<string>;\r\n\r\n    /**\r\n     * The values that were removed.\r\n     */\r\n    readonly removedValues: ReadonlyArray<T>;\r\n\r\n    /**\r\n     * The ids that were inserted.\r\n     */\r\n    readonly insertedIds: ReadonlyArray<string>;\r\n\r\n    /**\r\n     * The values that were inserted.\r\n     */\r\n    readonly insertedValues: ReadonlyArray<T>;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the list field patch type.\r\n   */\r\n  export\r\n  type Patch<T extends ReadonlyJSONValue> = ReadonlyArray<PatchPart<T>>;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * A type-guard function for a list field update type.\r\n   */\r\n  export\r\n  function isSplice<T extends ReadonlyJSONValue>(value: ListField.Update<T>): value is ListField.Splice<T> {\r\n    return !Array.isArray(value);\r\n  }\r\n\r\n  /**\r\n   * A type alias for the result of a splice operation.\r\n   */\r\n  export\r\n  type SpliceResult<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The user-facing change part for the splice.\r\n     */\r\n    readonly change: ListField.ChangePart<T>;\r\n\r\n    /**\r\n     * The system-facing patch part for the splice.\r\n     */\r\n    readonly patch: ListField.PatchPart<T>;\r\n  };\r\n\r\n  /**\r\n   * Apply a splice to a list field.\r\n   *\r\n   * @param array - The mutable current value of the field.\r\n   *\r\n   * @param splice - The splice to apply to the field.\r\n   *\r\n   * @param metadata - The metadata for the field.\r\n   *\r\n   * @param version - The current datastore version.\r\n   *\r\n   * @param storeId - The unique id of the datastore.\r\n   *\r\n   * @returns The result of the splice operation.\r\n   */\r\n  export\r\n  function applySplice<T extends ReadonlyJSONValue>(array: T[], splice: ListField.Splice<T>, metadata: ListField.Metadata<T>, version: number, storeId: number): SpliceResult<T> {\r\n    // Unpack the splice.\r\n    let { index, remove, values } = splice;\r\n\r\n    // Clamp the index to the array bounds.\r\n    if (index < 0) {\r\n      index = Math.max(0, index + array.length);\r\n    } else {\r\n      index = Math.min(index, array.length);\r\n    }\r\n\r\n    // Clamp the remove count to the array bounds.\r\n    let count = Math.min(remove, array.length - index);\r\n\r\n    // Fetch the lower and upper identifiers.\r\n    let lower = index === 0 ? '' : metadata.ids[index - 1];\r\n    let upper = index === array.length ? '' : metadata.ids[index];\r\n\r\n    // Create the ids for the splice.\r\n    let ids = createTriplexIds(values.length, version, storeId, lower, upper);\r\n\r\n    // Apply the splice to the ids and values.\r\n    let removedIds = spliceArray(metadata.ids, index, count, ids);\r\n    let removedValues = spliceArray(array, index, count, values);\r\n\r\n    // Create the change object.\r\n    let change = { index, removed: removedValues, inserted: values };\r\n\r\n    // Create the patch object.\r\n    let patch = { removedIds, removedValues, insertedIds: ids, insertedValues: values };\r\n\r\n    // Return the splice result.\r\n    return { change, patch };\r\n  }\r\n\r\n  /**\r\n   * Apply a patch to a list field.\r\n   *\r\n   * @param value - The mutable current value of the field.\r\n   *\r\n   * @param patch - The patch part to apply to the field.\r\n   *\r\n   * @param metadata - The metadata for the field.\r\n   *\r\n   * @returns The user-facing change array for the patch.\r\n   */\r\n  export\r\n  function applyPatch<T extends ReadonlyJSONValue>(value: T[], patch: ListField.PatchPart<T>, metadata: ListField.Metadata<T>): ListField.Change<T> {\r\n    // Unpack the patch.\r\n    let { removedIds, insertedIds, insertedValues } = patch;\r\n\r\n    // Set up the change array.\r\n    let change: ListField.ChangePart<T>[] = [];\r\n\r\n    // Process the removed identifiers, if necessary.\r\n    if (removedIds.length > 0) {\r\n      // Chunkify the removed identifiers,\r\n      // or increment the removed ids in the cemetery.\r\n      let chunks = findRemovedChunks(removedIds, metadata);\r\n\r\n      // Process the chunks.\r\n      while (chunks.length > 0) {\r\n        // Pop the last-most chunk.\r\n        let { index, count } = chunks.pop()!;\r\n\r\n        // Remove the identifiers from the metadata.\r\n        metadata.ids.splice(index, count);\r\n\r\n        // Remove the values from the array.\r\n        let removed = value.splice(index, count);\r\n\r\n        // Add the change part to the change array.\r\n        change.push({ index, removed, inserted: [] });\r\n      }\r\n    }\r\n\r\n    // Process the inserted identifiers, if necessary.\r\n    if (insertedIds.length > 0) {\r\n      // Chunkify the inserted identifiers, or decrement the removed\r\n      // ids in the cemetery.\r\n      let chunks = findInsertedChunks(insertedIds, insertedValues, metadata);\r\n\r\n      // Process the chunks.\r\n      while (chunks.length > 0) {\r\n        // Pop the last-most chunk.\r\n        let { index, ids, values } = chunks.pop()!;\r\n\r\n        // Insert the identifiers into the metadata.\r\n        spliceArray(metadata.ids, index, 0, ids);\r\n\r\n        // Insert the values into the array.\r\n        spliceArray(value, index, 0, values);\r\n\r\n        // Add the change part to the change array.\r\n        change.push({ index, removed: [], inserted: values });\r\n      }\r\n    }\r\n\r\n    // Return the change array.\r\n    return change;\r\n  }\r\n\r\n  /**\r\n   * A type alias for a remove chunk.\r\n   */\r\n  type RemoveChunk = {\r\n    // The index of the removal.\r\n    index: number;\r\n\r\n    // The number of elements to remove.\r\n    count: number;\r\n  };\r\n\r\n  /**\r\n   * Convert an array of identifiers into removal chunks.\r\n   *\r\n   * @param ids - The ids to remove from the metadta.\r\n   *\r\n   * @param metadata - The metadata for the list field.\r\n   *\r\n   * @returns The ordered chunks to remove.\r\n   *\r\n   * #### Notes\r\n   * The metadata may be mutated if concurrently removed chunks are encountered.\r\n   */\r\n  function findRemovedChunks(ids: ReadonlyArray<string>, metadata: ListField.Metadata<any>): RemoveChunk[] {\r\n    // Set up the chunks array.\r\n    let chunks: RemoveChunk[] = [];\r\n\r\n    // Set up the iteration index.\r\n    let i = 0;\r\n\r\n    // Fetch the identifier array length.\r\n    let n = ids.length;\r\n\r\n    // Iterate over the identifiers to remove.\r\n    while (i < n) {\r\n      // Find the boundary identifier for the current id.\r\n      let j = ArrayExt.lowerBound(metadata.ids, ids[i], StringExt.cmp);\r\n\r\n      // If the boundary is at the end of the array, or if the boundary id\r\n      // does not match the id we are looking for, then we are dealing with\r\n      // a concurrently deleted value. In that case, increment its reference\r\n      // in the cemetery and continue processing ids.\r\n      if (j === metadata.ids.length || metadata.ids[j] !== ids[i]) {\r\n        let count = metadata.cemetery[ids[i]] || 0;\r\n        metadata.cemetery[ids[i]] = count + 1;\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      // Set up the chunk index.\r\n      let index = j;\r\n\r\n      // Set up the chunk count.\r\n      let count = 0;\r\n\r\n      // Find the extent of the chunk.\r\n      while (i < n && StringExt.cmp(ids[i], metadata.ids[j]) === 0) {\r\n        count++;\r\n        i++;\r\n        j++;\r\n      }\r\n\r\n      // Add the chunk to the chunks array, or bump the id index.\r\n      if (count > 0) {\r\n        chunks.push({ index, count });\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    // Return the computed chunks.\r\n    return chunks;\r\n  }\r\n\r\n  /**\r\n   * A type alias for an insert chunk.\r\n   */\r\n  type InsertChunk<T extends ReadonlyJSONValue> = {\r\n    // The index of the insert.\r\n    index: number;\r\n\r\n    // The identifiers to insert.\r\n    ids: string[];\r\n\r\n    // The values to insert.\r\n    values: T[];\r\n  };\r\n\r\n  /**\r\n   * Convert arrays of identifiers and values into insert chunks.\r\n   *\r\n   * @param ids - The ids to be inserted.\r\n   *\r\n   * @param values - The values to be inserted.\r\n   *\r\n   * @param metadata - The metadata for the list field.\r\n   *\r\n   * @returns The ordered chunks to insert.\r\n   *\r\n   * #### Notes\r\n   * The metadata may be mutated if concurrently removed chunks are encountered.\r\n   */\r\n  function findInsertedChunks<T extends ReadonlyJSONValue>(ids: ReadonlyArray<string>, values: ReadonlyArray<T>, metadata: ListField.Metadata<any>): InsertChunk<T>[] {\r\n    let indices: number[] = [];\r\n    let insertIds: string[] = [];\r\n    let insertValues: T[] = [];\r\n\r\n     for (let i = 0; i < ids.length; i++) {\r\n       // Check if the id has been concurrently deleted. If so, update\r\n       // the cemetery, and continue processing without inserting the id.\r\n      if (checkCemeteryForInsert(ids[i], metadata.cemetery)) {\r\n        continue;\r\n      }\r\n\r\n      // Add the id to the ids which will be actually inserted.\r\n      insertIds.push(ids[i]);\r\n      indices.push(ArrayExt.lowerBound(metadata.ids, ids[i], StringExt.cmp));\r\n      insertValues.push(values[i]);\r\n    }\r\n    return chunkifyInsertions(insertIds, insertValues, indices);\r\n  }\r\n\r\n  /**\r\n   * Consolidate inserted IDs into a set of chunks so that we can splice them\r\n   * into the existing value with a minimal number of splices.\r\n   *\r\n   * @param ids - The ids to be inserted.\r\n   *\r\n   * @param values - The values to be inserted. Should be the same length as ids.\r\n   *\r\n   * @param indices - The indices at which to insert the text. Should be the same length as ids.\r\n   *\r\n   * @returns The ordered chunks to insert.\r\n   */\r\n  function chunkifyInsertions<T extends ReadonlyJSONValue>(ids: ReadonlyArray<string>, values: ReadonlyArray<T>, indices: ReadonlyArray<number>): InsertChunk<T>[] {\r\n    // Set up the chunks array.\r\n    let chunks: InsertChunk<T>[] = [];\r\n\r\n    // Set up the loop over the ids to insert.\r\n    let insertIndex: number;\r\n    let i = 0;\r\n    while (i < ids.length) {\r\n      // Reset the insert chunk data\r\n      let chunkIds: string[] = [];\r\n      let chunkValues: T[] = [];\r\n      insertIndex = indices[i];\r\n\r\n      // Find the extent of the chunk\r\n      while (indices[i] === insertIndex && i < ids.length) {\r\n        chunkIds.push(ids[i]);\r\n        chunkValues.push(values[i]);\r\n        i++;\r\n      }\r\n      if (chunkValues.length) {\r\n        chunks.push({ index: insertIndex, ids: chunkIds, values: chunkValues });\r\n      }\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  /**\r\n   * Check if an id should be inserted, or if it has been concurrently deleted.\r\n   *\r\n   * @param id - the id to check.\r\n   *\r\n   * @param cemetery - the cemetery which determines whether the id should be inserted.\r\n   *\r\n   * @returns whether the id was found, indicating that it shouldn't be inserted.\r\n   *\r\n   * #### Notes\r\n   * If the ID *is* found in the cemetery, its value in the cemetery is decremented,\r\n   * reflecting that it is closer to being shown.\r\n   */\r\n  function checkCemeteryForInsert(id: string, cemetery: { [x: string]: number }): boolean {\r\n    let count = cemetery[id] || 0;\r\n    if (count === 1) {\r\n      delete cemetery[id];\r\n      return true;\r\n    }\r\n    if (count > 1) {\r\n      cemetery[id] = count - 1;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Splice data into an array.\r\n   *\r\n   * #### Notes\r\n   * This is intentionally similar to Array.splice, but chunks the splices into\r\n   * multiple splices so that it does not crash if the number of spliced IDs\r\n   * is greater than the maximum number of arguments for a function.\r\n   *\r\n   * @param arr - the array on which to perform the splice.\r\n   *\r\n   * @param start - the start index for the splice.\r\n   *\r\n   * @param deleteCount - how many indices to remove.\r\n   *\r\n   * @param items - the items to splice into the array.\r\n   *\r\n   * @returns an array of the deleted elements.\r\n   */\r\n  function spliceArray<T>(arr: T[], start: number, deleteCount?: number, items?: ReadonlyArray<T>): ReadonlyArray<T> {\r\n    if (!items) {\r\n      return arr.splice(start, deleteCount);\r\n    }\r\n    let size = 100000;\r\n    if (items.length < size) {\r\n      return arr.splice(start, deleteCount || 0, ...items);\r\n    }\r\n    let deleted = arr.splice(start, deleteCount);\r\n    let n = Math.floor(items.length / size);\r\n    let idx = 0;\r\n    for (let i = 0; i < n; i++, idx += size) {\r\n      arr.splice(start + idx, 0, ...items.slice(idx, idx + size));\r\n    }\r\n    arr.splice(start + idx, 0, ...items.slice(idx));\r\n    return deleted;\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ArrayExt, StringExt\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  ReadonlyJSONValue\r\n} from '@lumino/coreutils';\r\n\r\nimport {\r\n  Field\r\n} from './field';\r\n\r\nimport {\r\n  createDuplexId\r\n} from './utilities';\r\n\r\n\r\n/**\r\n * A field which represents a collaborative key:value map.\r\n */\r\nexport\r\nclass MapField<T extends ReadonlyJSONValue> extends Field<MapField.Value<T>, MapField.Update<T>, MapField.Metadata<T>, MapField.Change<T>, MapField.Patch<T>> {\r\n  /**\r\n   * Construct a new map field.\r\n   *\r\n   * @param options - The options for initializing the field.\r\n   */\r\n  constructor(options: MapField.IOptions<T> = {}) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * The discriminated type of the field.\r\n   */\r\n  get type(): 'map' {\r\n    return 'map';\r\n  }\r\n\r\n  /**\r\n   * Create the initial value for the field.\r\n   *\r\n   * @returns The initial value for the field.\r\n   */\r\n  createValue(): MapField.Value<T> {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Create the metadata for the field.\r\n   *\r\n   * @returns The metadata for the field.\r\n   */\r\n  createMetadata(): MapField.Metadata<T> {\r\n    return { ids: {}, values: {} };\r\n  }\r\n\r\n  /**\r\n   * Apply a user update to the field.\r\n   *\r\n   * @param args - The arguments for the update.\r\n   *\r\n   * @returns The result of applying the update.\r\n   */\r\n  applyUpdate(args: Field.UpdateArgs<MapField.Value<T>, MapField.Update<T>, MapField.Metadata<T>>): Field.UpdateResult<MapField.Value<T>, MapField.Change<T>, MapField.Patch<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, update, metadata, version, storeId } = args;\r\n\r\n    // Create the id for the values.\r\n    let id = createDuplexId(version, storeId);\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = { ...previous };\r\n\r\n    // Set up the previous and current change parts.\r\n    let prev: { [key: string]: T | null } = {};\r\n    let curr: { [key: string]: T | null } = {};\r\n\r\n    // Iterate over the update.\r\n    for (let key in update) {\r\n      // Insert the update value into the metadata.\r\n      let value = Private.insertIntoMetadata(metadata, key, id, update[key]);\r\n\r\n      // Update the clone with the new value.\r\n      if (value === null) {\r\n        delete clone[key];\r\n      } else {\r\n        clone[key] = value;\r\n      }\r\n\r\n      // Update the previous change part.\r\n      prev[key] = key in previous ? previous[key] : null;\r\n\r\n      // Update the current change part.\r\n      curr[key] = value;\r\n    }\r\n\r\n    // Create the change object.\r\n    let change = { previous: prev, current: curr };\r\n\r\n    // Create the patch object.\r\n    let patch = { id, values: update };\r\n\r\n    // Return the update result.\r\n    return { value: clone, change, patch };\r\n  }\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  applyPatch(args: Field.PatchArgs<MapField.Value<T>, MapField.Patch<T>, MapField.Metadata<T>>): Field.PatchResult<MapField.Value<T>, MapField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Unpack the patch.\r\n    let { id, values } = patch;\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = { ...previous };\r\n\r\n    // Set up the previous and current change parts.\r\n    let prev: { [key: string]: T | null } = {};\r\n    let curr: { [key: string]: T | null } = {};\r\n\r\n    // Iterate over the values.\r\n    for (let key in values) {\r\n      // Insert the patch value into the metadata.\r\n      let value = Private.insertIntoMetadata(metadata, key, id, values[key]);\r\n\r\n      // Update the clone with the new value.\r\n      if (value === null) {\r\n        delete clone[key];\r\n      } else {\r\n        clone[key] = value;\r\n      }\r\n\r\n      // Update the previous change part.\r\n      prev[key] = key in previous ? previous[key] : null;\r\n\r\n      // Update the current change part.\r\n      curr[key] = value;\r\n    }\r\n\r\n    // Create the change object.\r\n    let change = { previous: prev, current: curr };\r\n\r\n    // Return the patch result.\r\n    return { value: clone, change };\r\n  }\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  unapplyPatch(args: Field.PatchArgs<MapField.Value<T>, MapField.Patch<T>, MapField.Metadata<T>>): Field.PatchResult<MapField.Value<T>, MapField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Unpack the patch.\r\n    let { id, values } = patch;\r\n\r\n    // Create a clone of the previous value.\r\n    let clone = { ...previous };\r\n\r\n    // Set up the previous and current change parts.\r\n    let prev: { [key: string]: T | null } = {};\r\n    let curr: { [key: string]: T | null } = {};\r\n\r\n    // Iterate over the values.\r\n    for (let key in values) {\r\n      // Remove the patch value from the metadata.\r\n      let value = Private.removeFromMetadata(metadata, key, id);\r\n\r\n      // Update the clone with the new value.\r\n      if (value === null) {\r\n        delete clone[key];\r\n      } else {\r\n        clone[key] = value;\r\n      }\r\n\r\n      // Update the previous change part.\r\n      prev[key] = key in previous ? previous[key] : null;\r\n\r\n      // Update the current change part.\r\n      curr[key] = value;\r\n    }\r\n\r\n    // Create the change object.\r\n    let change = { previous: prev, current: curr };\r\n\r\n    // Return the patch result.\r\n    return { value: clone, change };\r\n  }\r\n\r\n  /**\r\n   * Merge two change objects into a single change object.\r\n   *\r\n   * @param first - The first change object of interest.\r\n   *\r\n   * @param second - The second change object of interest.\r\n   *\r\n   * @returns A new change object which represents both changes.\r\n   */\r\n  mergeChange(first: MapField.Change<T>, second: MapField.Change<T>): MapField.Change<T> {\r\n    let previous = { ...second.previous, ...first.previous };\r\n    let current = { ...first.current, ...second.current };\r\n    return { previous, current };\r\n  }\r\n\r\n  /**\r\n   * Merge two patch objects into a single patch object.\r\n   *\r\n   * @param first - The first patch object of interest.\r\n   *\r\n   * @param second - The second patch object of interest.\r\n   *\r\n   * @returns A new patch object which represents both patches.\r\n   */\r\n  mergePatch(first: MapField.Patch<T>, second: MapField.Patch<T>): MapField.Patch<T> {\r\n    return { id: second.id, values: { ...first.values, ...second.values } };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `MapField` class statics.\r\n */\r\nexport\r\nnamespace MapField {\r\n  /**\r\n   * An options object for initializing a map field.\r\n   */\r\n  export\r\n  interface IOptions<T extends ReadonlyJSONValue> extends Field.IOptions { }\r\n\r\n  /**\r\n   * A type alias for the map field value type.\r\n   */\r\n  export\r\n  type Value<T extends ReadonlyJSONValue> = {\r\n    readonly [key: string]: T;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the map field update type.\r\n   */\r\n  export\r\n  type Update<T extends ReadonlyJSONValue> = {\r\n    readonly [key: string]: T | null;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the map field metadata type.\r\n   */\r\n  export\r\n  type Metadata<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * A mapping of key:id-history.\r\n     */\r\n    readonly ids: { [key: string]: Array<string> };\r\n\r\n    /**\r\n     * A mapping of key:value-history.\r\n     */\r\n    readonly values: { [key: string]: Array<T | null> };\r\n  };\r\n\r\n  /**\r\n   * A type alias for the map field change type.\r\n   */\r\n  export\r\n  type Change<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The previous values of the changed items.\r\n     */\r\n    readonly previous: { readonly [key: string]: T | null };\r\n\r\n    /**\r\n     * The current values of the changed items.\r\n     */\r\n    readonly current: { readonly [key: string]: T | null };\r\n  };\r\n\r\n  /**\r\n   * A type alias for the map field patch type.\r\n   */\r\n  export\r\n  type Patch<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The unique id associated with the values.\r\n     */\r\n    readonly id: string;\r\n\r\n    /**\r\n     * The current values of the changed items.\r\n     */\r\n    readonly values: { readonly [key: string]: T | null };\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * Insert a value into the map field metadata.\r\n   *\r\n   * @param metadata - The metadata of interest.\r\n   *\r\n   * @param key - The key of interest.\r\n   *\r\n   * @param id - The unique id for the value.\r\n   *\r\n   * @param value - The value to insert.\r\n   *\r\n   * @returns The current value for the key.\r\n   *\r\n   * #### Notes\r\n   * If the id already exists, the old value will be overwritten.\r\n   */\r\n  export\r\n  function insertIntoMetadata<T extends ReadonlyJSONValue>(metadata: MapField.Metadata<T>, key: string, id: string, value: T | null): T | null {\r\n    // Fetch the id and value arrays for the given key.\r\n    let ids = metadata.ids[key] || (metadata.ids[key] = []);\r\n    let values = metadata.values[key] || (metadata.values[key] = []);\r\n\r\n    // Find the insert index for the id.\r\n    let i = ArrayExt.lowerBound(ids, id, StringExt.cmp);\r\n\r\n    // Overwrite or insert the value as appropriate.\r\n    if (i < ids.length && ids[i] === id) {\r\n      values[i] = value;\r\n    } else {\r\n      ArrayExt.insert(ids, i, id);\r\n      ArrayExt.insert(values, i, value);\r\n    }\r\n\r\n    // Return the current value for the key.\r\n    return values[values.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the map field metadata.\r\n   *\r\n   * @param metadata - The metadata of interest.\r\n   *\r\n   * @param key - The key of interest.\r\n   *\r\n   * @param id - The unique id for the value.\r\n   *\r\n   * @returns The current value for the key, or null if there is no value.\r\n   *\r\n   * #### Notes\r\n   * If the id is not in the metadata, this is a no-op.\r\n   */\r\n  export\r\n  function removeFromMetadata<T extends ReadonlyJSONValue>(metadata: MapField.Metadata<T>, key: string, id: string): T | null {\r\n    // Fetch the id and value arrays for the given key.\r\n    let ids = metadata.ids[key] || (metadata.ids[key] = []);\r\n    let values = metadata.values[key] || (metadata.values[key] = []);\r\n\r\n    // Find the insert index for the id.\r\n    let i = ArrayExt.lowerBound(ids, id, StringExt.cmp);\r\n\r\n    // Find and remove the index for the id.\r\n    if (ids[i] === id) {\r\n      ArrayExt.removeAt(ids, i);\r\n      ArrayExt.removeAt(values, i);\r\n    }\r\n\r\n    // Return the current value for the key.\r\n    return values.length ? values[values.length - 1] : null;\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ArrayExt, StringExt\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  ReadonlyJSONValue\r\n} from '@lumino/coreutils';\r\n\r\nimport {\r\n  Field\r\n} from './field';\r\n\r\nimport {\r\n  createDuplexId\r\n} from './utilities';\r\n\r\n\r\n/**\r\n * A field which represents a collaborative atomic value.\r\n */\r\nexport\r\nclass RegisterField<T extends ReadonlyJSONValue> extends Field<RegisterField.Value<T>, RegisterField.Update<T>, RegisterField.Metadata<T>, RegisterField.Change<T>, RegisterField.Patch<T>> {\r\n  /**\r\n   * Construct a new register field.\r\n   *\r\n   * @param options - The options for initializing the field.\r\n   */\r\n  constructor(options: RegisterField.IOptions<T>) {\r\n    super(options);\r\n    this.value = options.value;\r\n  }\r\n\r\n  /**\r\n   * The discriminated type of the field.\r\n   */\r\n  get type(): 'register' {\r\n    return 'register';\r\n  }\r\n\r\n  /**\r\n   * The initial value for the field.\r\n   */\r\n  readonly value: T;\r\n\r\n  /**\r\n   * Create the initial value for the field.\r\n   *\r\n   * @returns The initial value for the field.\r\n   */\r\n  createValue(): RegisterField.Value<T> {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Create the metadata for the field.\r\n   *\r\n   * @returns The metadata for the field.\r\n   */\r\n  createMetadata(): RegisterField.Metadata<T> {\r\n    return { ids: [], values: [] };\r\n  }\r\n\r\n  /**\r\n   * Apply a user update to the field.\r\n   *\r\n   * @param args - The arguments for the update.\r\n   *\r\n   * @returns The result of applying the update.\r\n   */\r\n  applyUpdate(args: Field.UpdateArgs<RegisterField.Value<T>, RegisterField.Update<T>, RegisterField.Metadata<T>>): Field.UpdateResult<RegisterField.Value<T>, RegisterField.Change<T>, RegisterField.Patch<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, update, metadata, version, storeId } = args;\r\n\r\n    // Create the id for the value.\r\n    let id = createDuplexId(version, storeId);\r\n\r\n    // Insert the update value into the metadata.\r\n    let value = Private.insertIntoMetadata(metadata, id, update);\r\n\r\n    // Create the change object.\r\n    let change = { previous, current: value };\r\n\r\n    // Create the patch object.\r\n    let patch = { id, value: update };\r\n\r\n    // Return the result of the update.\r\n    return { value, change, patch };\r\n  }\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  applyPatch(args: Field.PatchArgs<RegisterField.Value<T>, RegisterField.Patch<T>, RegisterField.Metadata<T>>): Field.PatchResult<RegisterField.Value<T>, RegisterField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Insert the patch value into the metadata.\r\n    let value = Private.insertIntoMetadata(metadata, patch.id, patch.value);\r\n\r\n    // Create the change object.\r\n    let change = { previous, current: value };\r\n\r\n    // Return the result of the patch.\r\n    return { value, change };\r\n  }\r\n\r\n  /**\r\n   * Unapply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of unapplying the patch.\r\n   */\r\n  unapplyPatch(args: Field.PatchArgs<RegisterField.Value<T>, RegisterField.Patch<T>, RegisterField.Metadata<T>>): Field.PatchResult<RegisterField.Value<T>, RegisterField.Change<T>> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Remove the patch value from the metadata.\r\n    let value = Private.removeFromMetadata(metadata, patch.id, this.value);\r\n\r\n    // Create the change object.\r\n    let change = { previous, current: value };\r\n\r\n    // Return the result of the patch.\r\n    return { value, change };\r\n  }\r\n\r\n  /**\r\n   * Merge two change objects into a single change object.\r\n   *\r\n   * @param first - The first change object of interest.\r\n   *\r\n   * @param second - The second change object of interest.\r\n   *\r\n   * @returns A new change object which represents both changes.\r\n   */\r\n  mergeChange(first: RegisterField.Change<T>, second: RegisterField.Change<T>): RegisterField.Change<T> {\r\n    return { previous: first.previous, current: second.current };\r\n  }\r\n\r\n  /**\r\n   * Merge two patch objects into a single patch object.\r\n   *\r\n   * @param first - The first patch object of interest.\r\n   *\r\n   * @param second - The second patch object of interest.\r\n   *\r\n   * @returns A new patch object which represents both patches.\r\n   */\r\n  mergePatch(first: RegisterField.Patch<T>, second: RegisterField.Patch<T>): RegisterField.Patch<T> {\r\n    return second;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `RegisterField` class statics.\r\n */\r\nexport\r\nnamespace RegisterField {\r\n  /**\r\n   * An options object for initializing a register field.\r\n   */\r\n  export\r\n  interface IOptions<T extends ReadonlyJSONValue> extends Field.IOptions {\r\n    /**\r\n     * The initial value for the field.\r\n     */\r\n    value: T;\r\n  }\r\n\r\n  /**\r\n   * A type alias for the register field value type.\r\n   */\r\n  export\r\n  type Value<T extends ReadonlyJSONValue> = T;\r\n\r\n  /**\r\n   * A type alias for the register field update type.\r\n   */\r\n  export\r\n  type Update<T extends ReadonlyJSONValue> = T;\r\n\r\n  /**\r\n   * A type alias for the register field change type.\r\n   */\r\n  export\r\n  type Change<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The previous value of the field.\r\n     */\r\n    readonly previous: T;\r\n\r\n    /**\r\n     * The current value of the field.\r\n     */\r\n    readonly current: T;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the register field patch type.\r\n   */\r\n  export\r\n  type Patch<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * The unique id for the value.\r\n     */\r\n    readonly id: string;\r\n\r\n    /**\r\n     * The current value of the field.\r\n     */\r\n    readonly value: T;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the register field metadata type.\r\n   */\r\n  export\r\n  type Metadata<T extends ReadonlyJSONValue> = {\r\n    /**\r\n     * An array of id history.\r\n     */\r\n    readonly ids: Array<string>;\r\n\r\n    /**\r\n     * An array of value history.\r\n     */\r\n    readonly values: Array<T>;\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * Insert a value into the register field metadata.\r\n   *\r\n   * @param metadata - The metadata of interest.\r\n   *\r\n   * @param id - The unique id for the value.\r\n   *\r\n   * @param value - The value to insert.\r\n   *\r\n   * @returns The current value for the register field.\r\n   *\r\n   * #### Notes\r\n   * If the id already exists, the old value will be overwritten.\r\n   */\r\n  export\r\n  function insertIntoMetadata<T extends ReadonlyJSONValue>(metadata: RegisterField.Metadata<T>, id: string, value: T): T {\r\n    // Unpack the metadata.\r\n    let { ids, values } = metadata;\r\n\r\n    // Find the insert index for the id.\r\n    let i = ArrayExt.lowerBound(ids, id, StringExt.cmp);\r\n\r\n    // Overwrite or insert the value as appropriate.\r\n    if (i < ids.length && ids[i] === id) {\r\n      values[i] = value;\r\n    } else {\r\n      ArrayExt.insert(ids, i, id);\r\n      ArrayExt.insert(values, i, value);\r\n    }\r\n\r\n    // Return the current value for the register field.\r\n    return values[values.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the register field metadata.\r\n   *\r\n   * @param metadata - The metadata of interest.\r\n   *\r\n   * @param id - The unique id for the value.\r\n   *\r\n   * @param initial - The default value for the field\r\n   *\r\n   * @returns The current value for the register field.\r\n   *\r\n   * #### Notes\r\n   * If the id does not exist in the metadata, this is a no-op.\r\n   */\r\n  export\r\n  function removeFromMetadata<T extends ReadonlyJSONValue>(metadata: RegisterField.Metadata<T>, id: string, initial: T): T {\r\n    // Unpack the metadata.\r\n    let { ids, values } = metadata;\r\n\r\n    // Find the remove index for the id.\r\n    let i = ArrayExt.lowerBound(ids, id, StringExt.cmp);\r\n    if (ids[i] === id) {\r\n      ArrayExt.removeAt(ids, i);\r\n      ArrayExt.removeAt(values, i);\r\n    }\r\n    // Return the current value for the register field.\r\n    // If there are no values in the metadata, return the default value.\r\n    return values.length ? values[values.length - 1] : initial;\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ArrayExt, StringExt\r\n} from '@lumino/algorithm';\r\n\r\nimport {\r\n  Field\r\n} from './field';\r\n\r\nimport {\r\n  createTriplexIds\r\n} from './utilities';\r\n\r\n\r\n/**\r\n * A field which represents collaborative text.\r\n */\r\nexport\r\nclass TextField extends Field<TextField.Value, TextField.Update, TextField.Metadata, TextField.Change, TextField.Patch> {\r\n  /**\r\n   * Construct a new text field.\r\n   *\r\n   * @param options - The options for initializing the field.\r\n   */\r\n  constructor(options: TextField.IOptions = {}) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * The discriminated type of the field.\r\n   */\r\n  get type(): 'text' {\r\n    return 'text';\r\n  }\r\n\r\n  /**\r\n   * Create the initial value for the field.\r\n   *\r\n   * @returns The initial value for the field.\r\n   */\r\n  createValue(): TextField.Value {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Create the metadata for the field.\r\n   *\r\n   * @returns The metadata for the field.\r\n   */\r\n  createMetadata(): TextField.Metadata {\r\n    return { ids: [], cemetery: {} };\r\n  }\r\n\r\n  /**\r\n   * Apply a user update to the field.\r\n   *\r\n   * @param args - The arguments for the update.\r\n   *\r\n   * @returns The result of applying the update.\r\n   */\r\n  applyUpdate(args: Field.UpdateArgs<TextField.Value, TextField.Update, TextField.Metadata>): Field.UpdateResult<TextField.Value, TextField.Change, TextField.Patch> {\r\n    // Unpack the arguments.\r\n    let { previous, update, metadata, version, storeId } = args;\r\n\r\n    // Set up a variable to hold the current value.\r\n    let value = previous;\r\n\r\n    // Set up the change and patch arrays.\r\n    let change: TextField.ChangePart[] = [];\r\n    let patch: TextField.PatchPart[] = [];\r\n\r\n    // Coerce the update into an array of splices.\r\n    if (Private.isSplice(update)) {\r\n      update = [update];\r\n    }\r\n\r\n    // Iterate over the update.\r\n    for (let splice of update) {\r\n      // Apply the splice to the value.\r\n      let obj = Private.applySplice(value, splice, metadata, version, storeId);\r\n\r\n      // Update the change array.\r\n      change.push(obj.change);\r\n\r\n      // Update the patch array.\r\n      patch.push(obj.patch);\r\n\r\n      // Update the current value.\r\n      value = obj.value;\r\n    }\r\n\r\n    // Return the update result.\r\n    return { value, change, patch };\r\n  }\r\n\r\n  /**\r\n   * Apply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of applying the patch.\r\n   */\r\n  applyPatch(args: Field.PatchArgs<TextField.Value, TextField.Patch, TextField.Metadata>): Field.PatchResult<TextField.Value, TextField.Change> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Set up a variable to hold the current value.\r\n    let value = previous;\r\n\r\n    // Set up the change array.\r\n    let change: TextField.ChangePart[] = [];\r\n\r\n    // Iterate over the patch.\r\n    for (let part of patch) {\r\n      // Apply the patch part to the value.\r\n      let obj = Private.applyPatch(value, part, metadata);\r\n\r\n      // Update the change array.\r\n      change.push(...obj.change);\r\n\r\n      // Update the current value.\r\n      value = obj.value;\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { value, change };\r\n  }\r\n\r\n  /**\r\n   * Unapply a system patch to the field.\r\n   *\r\n   * @param args - The arguments for the patch.\r\n   *\r\n   * @returns The result of unapplying the patch.\r\n   */\r\n  unapplyPatch(args: Field.PatchArgs<TextField.Value, TextField.Patch, TextField.Metadata>): Field.PatchResult<TextField.Value, TextField.Change> {\r\n    // Unpack the arguments.\r\n    let { previous, patch, metadata } = args;\r\n\r\n    // Set up a variable to hold the current value.\r\n    let value = previous;\r\n\r\n    // Set up the change array.\r\n    let change: TextField.ChangePart[] = [];\r\n\r\n    // Iterate over the patch.\r\n    for (let part of patch) {\r\n      let reversed = {\r\n        removedIds: part.insertedIds,\r\n        insertedIds: part.removedIds,\r\n        removedText: part.insertedText,\r\n        insertedText: part.removedText\r\n      };\r\n      // Apply the patch part to the value.\r\n      let obj = Private.applyPatch(value, reversed, metadata);\r\n\r\n      // Update the change array.\r\n      change.push(...obj.change);\r\n\r\n      // Update the current value.\r\n      value = obj.value;\r\n    }\r\n\r\n    // Return the patch result.\r\n    return { value, change };\r\n  }\r\n\r\n  /**\r\n   * Merge two change objects into a single change object.\r\n   *\r\n   * @param first - The first change object of interest.\r\n   *\r\n   * @param second - The second change object of interest.\r\n   *\r\n   * @returns A new change object which represents both changes.\r\n   */\r\n  mergeChange(first: TextField.Change, second: TextField.Change): TextField.Change {\r\n    return [...first, ...second];\r\n  }\r\n\r\n  /**\r\n   * Merge two patch objects into a single patch object.\r\n   *\r\n   * @param first - The first patch object of interest.\r\n   *\r\n   * @param second - The second patch object of interest.\r\n   *\r\n   * @returns A new patch object which represents both patches.\r\n   */\r\n  mergePatch(first: TextField.Patch, second: TextField.Patch): TextField.Patch {\r\n    return [...first, ...second];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the `TextField` class statics.\r\n */\r\nexport\r\nnamespace TextField {\r\n  /**\r\n   * An options object for initializing a text field.\r\n   */\r\n  export\r\n  interface IOptions extends Field.IOptions { }\r\n\r\n  /**\r\n   * A type alias for the value type of a text field.\r\n   */\r\n  export\r\n  type Value = string;\r\n\r\n  /**\r\n   * A type alias for a text field splice.\r\n   */\r\n  export\r\n  type Splice = {\r\n    /**\r\n     * The index of the splice.\r\n     */\r\n    readonly index: number;\r\n\r\n    /**\r\n     * The number of characters to remove.\r\n     */\r\n    readonly remove: number;\r\n\r\n    /**\r\n     * The text to insert.\r\n     */\r\n    readonly text: string;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the text field update type.\r\n   */\r\n  export\r\n  type Update = Splice | ReadonlyArray<Splice>;\r\n\r\n  /**\r\n   * A type alias for the text field metadata type.\r\n   */\r\n  export\r\n  type Metadata = {\r\n    /**\r\n     * An array of ids corresponding to the text characters.\r\n     */\r\n    readonly ids: Array<string>;\r\n\r\n    /**\r\n     * The cemetery for concurrently deleted characters.\r\n     */\r\n    readonly cemetery: { [id: string]: number };\r\n  };\r\n\r\n  /**\r\n   * A type alias for a text field change part.\r\n   */\r\n  export\r\n  type ChangePart = {\r\n    /**\r\n     * The index of the modification.\r\n     */\r\n    readonly index: number;\r\n\r\n    /**\r\n     * The text that was removed.\r\n     */\r\n    readonly removed: string;\r\n\r\n    /**\r\n     * The text that was inserted.\r\n     */\r\n    readonly inserted: string;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the text field change type.\r\n   */\r\n  export\r\n  type Change = ReadonlyArray<ChangePart>;\r\n\r\n  /**\r\n   * A type alias for the text field patch part.\r\n   */\r\n  export\r\n  type PatchPart = {\r\n    /**\r\n     * The ids that were removed.\r\n     */\r\n    readonly removedIds: ReadonlyArray<string>;\r\n\r\n    /**\r\n     * The text that was removed.\r\n     */\r\n    readonly removedText: string;\r\n\r\n    /**\r\n     * The ids that were inserted.\r\n     */\r\n    readonly insertedIds: ReadonlyArray<string>;\r\n\r\n    /**\r\n     * The text that was inserted.\r\n     */\r\n    readonly insertedText: string;\r\n  };\r\n\r\n  /**\r\n   * A type alias for the text field patch type.\r\n   */\r\n  export\r\n  type Patch = ReadonlyArray<PatchPart>;\r\n}\r\n\r\n\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nnamespace Private {\r\n  /**\r\n   * A type-guard function for a text field update type.\r\n   */\r\n  export\r\n  function isSplice(value: TextField.Update): value is TextField.Splice {\r\n    return !Array.isArray(value);\r\n  }\r\n\r\n  /**\r\n   * A type alias for the result of a splice operation.\r\n   */\r\n  export\r\n  type SpliceResult = {\r\n    /**\r\n     * The user-facing change part for the splice.\r\n     */\r\n    readonly change: TextField.ChangePart;\r\n\r\n    /**\r\n     * The system-facing patch part for the splice.\r\n     */\r\n    readonly patch: TextField.PatchPart;\r\n\r\n    /**\r\n     * The new value of the text.\r\n     */\r\n    readonly value: string;\r\n  };\r\n\r\n  /**\r\n   * Apply a splice to a text field.\r\n   *\r\n   * @param value - The current value of the field.\r\n   *\r\n   * @param splice - The splice to apply to the field.\r\n   *\r\n   * @param metadata - The metadata for the field.\r\n   *\r\n   * @param version - The current datastore version.\r\n   *\r\n   * @param storeId - The unique id of the datastore.\r\n   *\r\n   * @returns The result of the splice operation.\r\n   */\r\n  export\r\n  function applySplice(value: string, splice: TextField.Splice, metadata: TextField.Metadata, version: number, storeId: number): SpliceResult {\r\n    // Unpack the splice.\r\n    let { index, remove, text } = splice;\r\n\r\n    // Clamp the index to the string bounds.\r\n    if (index < 0) {\r\n      index = Math.max(0, index + value.length);\r\n    } else {\r\n      index = Math.min(index, value.length);\r\n    }\r\n\r\n    // Clamp the remove count to the string bounds.\r\n    let count = Math.min(remove, value.length - index);\r\n\r\n    // Fetch the lower and upper identifiers.\r\n    let lower = index === 0 ? '' : metadata.ids[index - 1];\r\n    let upper = index === value.length ? '' : metadata.ids[index];\r\n\r\n    // Create the ids for the splice.\r\n    let ids = createTriplexIds(text.length, version, storeId, lower, upper);\r\n\r\n    // Apply the splice to the ids.\r\n    let removedIds = spliceArray(metadata.ids, index, count, ids);\r\n\r\n    // Compute the removed text.\r\n    let removedText = value.slice(index, index + count);\r\n\r\n    // Create the change object.\r\n    let change = { index, removed: removedText, inserted: text };\r\n\r\n    // Create the patch object.\r\n    let patch = { removedIds, removedText, insertedIds: ids, insertedText: text };\r\n\r\n    // Compute the new value.\r\n    value = value.slice(0, index) + text + value.slice(index + count);\r\n\r\n    // Return the splice result.\r\n    return { change, patch, value };\r\n  }\r\n\r\n  /**\r\n   * A type alias for the result of a patch operation.\r\n   */\r\n  export\r\n  type PatchResult = {\r\n    /**\r\n     * The user-facing change for the patch.\r\n     */\r\n    readonly change: TextField.Change;\r\n\r\n    /**\r\n     * The new value of the text.\r\n     */\r\n    readonly value: string;\r\n  };\r\n\r\n  /**\r\n   * Apply a patch to a text field.\r\n   *\r\n   * @param value - The current value of the field.\r\n   *\r\n   * @param patch - The patch part to apply to the field.\r\n   *\r\n   * @param metadata - The metadata for the field.\r\n   *\r\n   * @returns The user-facing change array for the patch.\r\n   */\r\n  export\r\n  function applyPatch(value: string, patch: TextField.PatchPart, metadata: TextField.Metadata): PatchResult {\r\n    // Unpack the patch.\r\n    let { removedIds, insertedIds, insertedText } = patch;\r\n\r\n    // Set up the change array.\r\n    let change: TextField.ChangePart[] = [];\r\n\r\n    // Process the removed identifiers, if necessary.\r\n    if (removedIds.length > 0) {\r\n      // Chunkify the removed identifiers,\r\n      // or increment the removed ids in the cemetery.\r\n      let chunks = findRemovedChunks(removedIds, metadata);\r\n\r\n      // Process the chunks.\r\n      while (chunks.length > 0) {\r\n        // Pop the last-most chunk.\r\n        let { index, count } = chunks.pop()!;\r\n\r\n        // Remove the identifiers from the metadata.\r\n        metadata.ids.splice(index, count);\r\n\r\n        // Compute the removed text\r\n        let removed = value.slice(index, index + count);\r\n\r\n        // Compute the new value.\r\n        value = value.slice(0, index) + value.slice(index + count);\r\n\r\n        // Add the change part to the change array.\r\n        change.push({ index, removed, inserted: '' });\r\n      }\r\n    }\r\n\r\n    // Process the inserted identifiers, if necessary.\r\n    if (insertedIds.length > 0) {\r\n      // Chunkify the inserted identifiers, or decrement the removed\r\n      // ids in the cemetery.\r\n      let chunks = findInsertedChunks(insertedIds, insertedText, metadata);\r\n\r\n      // Process the chunks.\r\n      while (chunks.length > 0) {\r\n        // Pop the last-most chunk.\r\n        let { index, ids, text } = chunks.pop()!;\r\n\r\n        // Insert the identifiers into the metadata.\r\n        spliceArray(metadata.ids, index, 0, ids);\r\n\r\n        // Insert the text into the value.\r\n        value = value.slice(0, index) + text + value.slice(index);\r\n\r\n        // Add the change part to the change array.\r\n        change.push({ index, removed: '', inserted: text });\r\n      }\r\n    }\r\n\r\n    // Return the change array.\r\n    return { change, value };\r\n  }\r\n\r\n  /**\r\n   * A type alias for a remove chunk.\r\n   */\r\n  type RemoveChunk = {\r\n    // The index of the removal.\r\n    index: number;\r\n\r\n    // The number of elements to remove.\r\n    count: number;\r\n  };\r\n\r\n  /**\r\n   * Convert an array of identifiers into removal chunks.\r\n   *\r\n   * @param ids - The ids to remove from the metadta.\r\n   *\r\n   * @param metadata - The metadata for the text field.\r\n   *\r\n   * @returns The ordered chunks to remove.\r\n   *\r\n   * #### Notes\r\n   * The metadata may be mutated if concurrently removed chunks are encountered.\r\n   */\r\n  function findRemovedChunks(ids: ReadonlyArray<string>, metadata: TextField.Metadata): RemoveChunk[] {\r\n    // Set up the chunks array.\r\n    let chunks: RemoveChunk[] = [];\r\n\r\n    // Set up the iteration index.\r\n    let i = 0;\r\n\r\n    // Fetch the identifier array length.\r\n    let n = ids.length;\r\n\r\n    // Iterate over the identifiers to remove.\r\n    while (i < n) {\r\n      // Find the boundary identifier for the current id.\r\n      let j = ArrayExt.lowerBound(metadata.ids, ids[i], StringExt.cmp);\r\n\r\n      // If the boundary is at the end of the array, or if the boundary id\r\n      // does not match the id we are looking for, then we are dealing with\r\n      // a concurrently deleted value. In that case, increment its reference\r\n      // in the cemetery and continue processing ids.\r\n      if (j === metadata.ids.length || metadata.ids[j] !== ids[i]) {\r\n        let count = metadata.cemetery[ids[i]] || 0;\r\n        metadata.cemetery[ids[i]] = count + 1;\r\n        i++\r\n        continue;\r\n      }\r\n\r\n      // Set up the chunk index.\r\n      let index = j;\r\n\r\n      // Set up the chunk count.\r\n      let count = 0;\r\n\r\n      // Find the extent of the chunk.\r\n      while (i < n && StringExt.cmp(ids[i], metadata.ids[j]) === 0) {\r\n        count++;\r\n        i++;\r\n        j++;\r\n      }\r\n\r\n      // Add the chunk to the chunks array, or bump the id index.\r\n      if (count > 0) {\r\n        chunks.push({ index, count });\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    // Return the computed chunks.\r\n    return chunks;\r\n  }\r\n\r\n  /**\r\n   * A type alias for an insert chunk.\r\n   */\r\n  type InsertChunk = {\r\n    // The index of the insert.\r\n    index: number;\r\n\r\n    // The identifiers to insert.\r\n    ids: string[];\r\n\r\n    // The text to insert.\r\n    text: string;\r\n  };\r\n\r\n  /**\r\n   * Convert arrays of identifiers and values into insert chunks.\r\n   *\r\n   * @param ids - The ids to be inserted.\r\n   *\r\n   * @param text - The text to be inserted.\r\n   *\r\n   * @param metadata - The metadata for the text field.\r\n   *\r\n   * @returns The ordered chunks to insert.\r\n   *\r\n   * #### Notes\r\n   * The metadata may be mutated if concurrently removed chunks are encountered.\r\n   */\r\n  function findInsertedChunks(ids: ReadonlyArray<string>, text: string, metadata: TextField.Metadata): InsertChunk[] {\r\n    let indices: number[] = [];\r\n    let insertIds: string[] = [];\r\n    let insertText = '';\r\n\r\n    for (let i = 0; i < ids.length; i++) {\r\n      // Check if the id has been concurrently deleted. If so, update\r\n      // the cemetery, and continue processing without inserting the id.\r\n      if (checkCemeteryForInsert(ids[i], metadata.cemetery)) {\r\n        continue;\r\n      }\r\n\r\n      // Add the id to the ids which will be actually inserted.\r\n      insertIds.push(ids[i]);\r\n      indices.push(ArrayExt.lowerBound(metadata.ids, ids[i], StringExt.cmp));\r\n      insertText += text[i];\r\n    }\r\n    return chunkifyInsertions(insertIds, insertText, indices);\r\n  }\r\n\r\n  /**\r\n   * Consolidate inserted IDs into a set of chunks so that we can splice them\r\n   * into the existing value with a minimal number of splices.\r\n   *\r\n   * @param ids - The ids to be inserted.\r\n   *\r\n   * @param text - The text to be inserted. Should be the same length as ids.\r\n   *\r\n   * @param indices - The indices at which to insert the text. Should be the same length as ids.\r\n   *\r\n   * @returns The ordered chunks to insert.\r\n   */\r\n  function chunkifyInsertions(ids: ReadonlyArray<string>, text: string, indices: ReadonlyArray<number>): InsertChunk[] {\r\n    // Set up the chunks array.\r\n    let chunks: InsertChunk[] = [];\r\n\r\n    // Set up the loop over the ids to insert.\r\n    let insertIndex: number;\r\n    let i = 0;\r\n    while (i < ids.length) {\r\n      // Reset the insert chunk data\r\n      let chunkIds: string[] = [];\r\n      let chunkText = '';\r\n      insertIndex = indices[i];\r\n\r\n      // Find the extent of the chunk\r\n      while (indices[i] === insertIndex && i < ids.length) {\r\n        chunkIds.push(ids[i]);\r\n        chunkText += text[i];\r\n        i++;\r\n      }\r\n      if (chunkText) {\r\n        chunks.push({ index: insertIndex, ids: chunkIds, text: chunkText });\r\n      }\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  /**\r\n   * Check if an id should be inserted, or if it has been concurrently deleted.\r\n   *\r\n   * @param id - the id to check.\r\n   *\r\n   * @param cemetery - the cemetery which determines whether the id should be inserted.\r\n   *\r\n   * @returns whether the id was found, indicating that it shouldn't be inserted.\r\n   *\r\n   * #### Notes\r\n   * If the ID *is* found in the cemetery, its value in the cemetery is decremented,\r\n   * reflecting that it is closer to being shown.\r\n   */\r\n  function checkCemeteryForInsert(id: string, cemetery: { [x: string]: number }): boolean {\r\n    let count = cemetery[id] || 0;\r\n    if (count === 1) {\r\n      delete cemetery[id];\r\n      return true;\r\n    }\r\n    if (count > 1) {\r\n      cemetery[id] = count - 1;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Splice data into an array.\r\n   *\r\n   * #### Notes\r\n   * This is intentionally similar to Array.splice, but chunks the splices into\r\n   * multiple splices so that it does not crash if the number of spliced IDs\r\n   * is greater than the maximum number of arguments for a function.\r\n   *\r\n   * @param arr - the array on which to perform the splice.\r\n   *\r\n   * @param start - the start index for the splice.\r\n   *\r\n   * @param deleteCount - how many indices to remove.\r\n   *\r\n   * @param items - the items to splice into the array.\r\n   *\r\n   * @returns an array of the deleted elements.\r\n   */\r\n  function spliceArray<T>(arr: T[], start: number, deleteCount?: number, items?: ReadonlyArray<T>): ReadonlyArray<T> {\r\n    if (!items) {\r\n      return arr.splice(start, deleteCount);\r\n    }\r\n    let size = 100000;\r\n    if (items.length < size) {\r\n      return arr.splice(start, deleteCount || 0, ...items);\r\n    }\r\n    let deleted = arr.splice(start, deleteCount);\r\n    let n = Math.floor(items.length / size);\r\n    let idx = 0;\r\n    for (let i = 0; i < n; i++, idx += size) {\r\n      arr.splice(idx, 0, ...items.slice(idx, size));\r\n    }\r\n    arr.splice(idx, 0, ...items.slice(idx));\r\n    return deleted;\r\n  }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nimport {\r\n  ReadonlyJSONValue\r\n} from '@lumino/coreutils';\r\n\r\nimport {\r\n  ListField\r\n} from './listfield';\r\n\r\nimport {\r\n  MapField\r\n} from './mapfield';\r\n\r\nimport {\r\n  RegisterField\r\n} from './registerfield';\r\n\r\nimport {\r\n  TextField\r\n} from './textfield';\r\n\r\n\r\n/**\r\n * The namespace for the `Fields` factory functions.\r\n */\r\nexport\r\nnamespace Fields {\r\n  /**\r\n   * A factory function which creates a boolean register field.\r\n   *\r\n   * @param options - The options for the field. The default `value`\r\n   *   option is `false`.\r\n   *\r\n   * @returns A new boolean register field.\r\n   */\r\n  export\r\n  function Boolean(options: Partial<RegisterField.IOptions<boolean>> = {}): RegisterField<boolean> {\r\n    return new RegisterField<boolean>({ value: false, ...options });\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a number register field.\r\n   *\r\n   * @param options - The options for the field. The default `value`\r\n   *   option is `0`.\r\n   *\r\n   * @returns A new number register field.\r\n   */\r\n  export\r\n  function Number(options: Partial<RegisterField.IOptions<number>> = {}): RegisterField<number> {\r\n    return new RegisterField<number>({ value: 0, ...options });\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a string register field.\r\n   *\r\n   * @param options - The options for the field. The default `value`\r\n   *   option is `''`.\r\n   *\r\n   * @returns A new string register field.\r\n   */\r\n  export\r\n  function String(options: Partial<RegisterField.IOptions<string>> = {}): RegisterField<string> {\r\n    return new RegisterField<string>({ value: '', ...options });\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a list field.\r\n   *\r\n   * @param options - The options for the field.\r\n   *\r\n   * @returns A new list field.\r\n   */\r\n  export\r\n  function List<T extends ReadonlyJSONValue>(options: ListField.IOptions<T> = {}): ListField<T> {\r\n    return new ListField<T>(options);\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a map field.\r\n   *\r\n   * @param options - The options for the field.\r\n   *\r\n   * @returns A new map field.\r\n   */\r\n  export\r\n  function Map<T extends ReadonlyJSONValue>(options: MapField.IOptions<T> = {}): MapField<T> {\r\n    return new MapField<T>(options);\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a register field.\r\n   *\r\n   * @param options - The options for the field.\r\n   *\r\n   * @returns A new register field.\r\n   */\r\n  export\r\n  function Register<T extends ReadonlyJSONValue>(options: RegisterField.IOptions<T>): RegisterField<T> {\r\n    return new RegisterField<T>(options);\r\n  }\r\n\r\n  /**\r\n   * A factory function which creates a text field.\r\n   *\r\n   * @param options - The options for the field.\r\n   *\r\n   * @returns A new text field.\r\n   */\r\n  export\r\n  function Text(options: TextField.IOptions = {}): TextField {\r\n    return new TextField(options);\r\n  }\r\n}\r\n"],"names":["Private"],"mappings":"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"}